#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ URL –∑ webfolks.io
"""

import asyncio
import sys
import os

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

async def test_webfolks_url():
    """–¢–µ—Å—Ç URL –∑ webfolks.io"""
    
    try:
        from accessibility_evaluator.core.evaluator import AccessibilityEvaluator
        print("‚úÖ –Ü–º–ø–æ—Ä—Ç —É—Å–ø—ñ—à–Ω–∏–π")
        
        evaluator = AccessibilityEvaluator()
        
        # –¢–µ—Å—Ç—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π URL
        test_url = "https://www.webfolks.io/case-studies/allsetra"
        print(f"üîç –¢–µ—Å—Ç—É—î–º–æ: {test_url}")
        
        result = await evaluator.evaluate_accessibility(test_url)
        
        if result['status'] == 'success':
            print("‚úÖ –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π —É—Å–ø—ñ—à–Ω–æ!")
            print(f"üìä –§—ñ–Ω–∞–ª—å–Ω–∏–π —Å–∫–æ—Ä: {result['final_score']:.3f}")
            
            print(f"\nüìà –ü—ñ–¥—Å–∫–æ—Ä–∏:")
            for key, value in result['subscores'].items():
                print(f"   {key}: {value:.3f}")
            
            print(f"\nüîç –î–µ—Ç–∞–ª—å–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏:")
            for key, value in result['metrics'].items():
                print(f"   {key}: {value:.3f}")
            
            print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó ({len(result['recommendations'])}):")
            for i, rec in enumerate(result['recommendations'][:3], 1):
                print(f"   {i}. {rec['category']}: {rec['recommendation']}")
                
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É: {result.get('error', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')}")
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è URL: webfolks.io")
    print("=" * 50)
    asyncio.run(test_webfolks_url())