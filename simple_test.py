#!/usr/bin/env python3
"""
–°–ø—Ä–æ—â–µ–Ω–∏–π —Ç–µ—Å—Ç –∑ –ø—Ä–æ—Å—Ç—ñ—à–∏–º URL
"""

import asyncio
import sys
import os

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

async def simple_test():
    """–¢–µ—Å—Ç –∑ –ø—Ä–æ—Å—Ç—ñ—à–∏–º URL"""
    
    try:
        from accessibility_evaluator.core.evaluator import AccessibilityEvaluator
        print("‚úÖ –Ü–º–ø–æ—Ä—Ç —É—Å–ø—ñ—à–Ω–∏–π")
        
        evaluator = AccessibilityEvaluator()
        
        # –¢–µ—Å—Ç—É—î–º–æ –∑ –ø—Ä–æ—Å—Ç—ñ—à–∏–º URL
        test_urls = [
            "https://example.com",
            "https://www.google.com",
            "https://httpbin.org/html"
        ]
        
        for url in test_urls:
            print(f"\nüîç –¢–µ—Å—Ç—É—î–º–æ: {url}")
            try:
                result = await evaluator.evaluate_accessibility(url)
                
                if result['status'] == 'success':
                    print(f"‚úÖ –£—Å–ø—ñ—Ö! –°–∫–æ—Ä: {result['final_score']:.3f}")
                    break
                else:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {result.get('error', '–ù–µ–≤—ñ–¥–æ–º–∞')}")
                    
            except Exception as e:
                print(f"‚ùå –í–∏–∫–ª—é—á–µ–Ω–Ω—è: {e}")
                continue
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(simple_test())