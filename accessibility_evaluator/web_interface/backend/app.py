"""
FastAPI –≤–µ–±-–¥–æ–¥–∞—Ç–æ–∫ –¥–ª—è –æ—Ü—ñ–Ω–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ
"""

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse
from pydantic import BaseModel, HttpUrl
from typing import Dict, Any
import asyncio
import os
import sys

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ core –º–æ–¥—É–ª—ñ–≤
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.join(current_dir, '..', '..')
sys.path.insert(0, project_root)

try:
    from accessibility_evaluator.core.evaluator import AccessibilityEvaluator
except ImportError:
    # Fallback –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É
    sys.path.insert(0, os.path.join(current_dir, '..', '..'))
    from core.evaluator import AccessibilityEvaluator

app = FastAPI(
    title="Accessibility Evaluator API",
    description="API –¥–ª—è –æ—Ü—ñ–Ω–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –≤–µ–±—Å–∞–π—Ç—ñ–≤ –∑–≥—ñ–¥–Ω–æ –∑ ISO 25023",
    version="1.0.0"
)

# CORS middleware –¥–ª—è frontend
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω—ñ –æ–±–º–µ–∂–∏—Ç–∏ –¥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö –¥–æ–º–µ–Ω—ñ–≤
    allow_credentials=True,
    allow_methods=["GET", "POST", "OPTIONS"],
    allow_headers=["*"],
)

# –î–æ–¥–∞—î–º–æ middleware –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤
@app.middleware("http")
async def log_requests(request, call_next):
    print(f"üì® {request.method} {request.url}")
    response = await call_next(request)
    print(f"üì§ –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response.status_code}")
    return response

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è evaluator
evaluator = AccessibilityEvaluator()


class URLRequest(BaseModel):
    """–ú–æ–¥–µ–ª—å –∑–∞–ø–∏—Ç—É –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É URL"""
    url: HttpUrl


class HTMLRequest(BaseModel):
    """–ú–æ–¥–µ–ª—å –∑–∞–ø–∏—Ç—É –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É HTML –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    html_content: str
    base_url: str = "http://localhost"  # –ë–∞–∑–æ–≤–∏–π URL –¥–ª—è –≤—ñ–¥–Ω–æ—Å–Ω–∏—Ö –ø–æ—Å–∏–ª–∞–Ω—å
    title: str = "HTML Document"  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞


class EvaluationResponse(BaseModel):
    """–ú–æ–¥–µ–ª—å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª—ñ–∑—É"""
    url: str
    metrics: Dict[str, float]
    subscores: Dict[str, float]
    final_score: float
    quality_level: str
    quality_description: str
    recommendations: list
    detailed_analysis: Dict[str, Any] = {}  # –î–æ–¥–∞—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
    status: str


@app.get("/", response_class=HTMLResponse)
async def read_root():
    """–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∑ –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    
    html_content = """
    <!DOCTYPE html>
    <html lang="uk">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>–û—Ü—ñ–Ω–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –≤–µ–±—Å–∞–π—Ç—ñ–≤</title>
        <style>
            * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }
            
            body {
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                line-height: 1.6;
                color: #333;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
                padding: 20px;
            }
            
            .container {
                max-width: 1200px;
                margin: 0 auto;
                background: white;
                border-radius: 15px;
                box-shadow: 0 20px 40px rgba(0,0,0,0.1);
                overflow: hidden;
            }
            
            .header {
                background: linear-gradient(135deg, #2c3e50 0%, #3498db 100%);
                color: white;
                padding: 40px;
                text-align: center;
            }
            
            .header h1 {
                font-size: 2.5rem;
                margin-bottom: 10px;
                font-weight: 300;
            }
            
            .header p {
                font-size: 1.1rem;
                opacity: 0.9;
            }
            
            .main-content {
                padding: 40px;
            }
            
            .tabs {
                display: flex;
                margin-bottom: 0;
                border-bottom: 2px solid #e9ecef;
            }
            
            .tab-button {
                background: #f8f9fa;
                border: 2px solid #e9ecef;
                border-bottom: none;
                padding: 15px 25px;
                cursor: pointer;
                font-size: 16px;
                font-weight: 600;
                color: #666;
                border-radius: 10px 10px 0 0;
                margin-right: 5px;
                transition: all 0.3s;
            }
            
            .tab-button:hover {
                background: #e9ecef;
                color: #333;
            }
            
            .tab-button.active {
                background: #3498db;
                color: white;
                border-color: #3498db;
            }
            
            .tab-content {
                display: none;
            }
            
            .tab-content.active {
                display: block;
            }
            
            .url-form {
                background: #f8f9fa;
                padding: 30px;
                border-radius: 0 10px 10px 10px;
                margin-bottom: 30px;
                border: 2px solid #e9ecef;
                border-top: none;
            }
            
            textarea {
                width: 100%;
                padding: 15px;
                border: 2px solid #ddd;
                border-radius: 8px;
                font-size: 14px;
                font-family: 'Courier New', monospace;
                transition: border-color 0.3s;
                resize: vertical;
                min-height: 200px;
            }
            
            textarea:focus {
                outline: none;
                border-color: #3498db;
                box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
            }
            
            input[type="file"] {
                width: 100%;
                padding: 15px;
                border: 2px dashed #ddd;
                border-radius: 8px;
                font-size: 16px;
                background: #f8f9fa;
                cursor: pointer;
                transition: all 0.3s;
            }
            
            input[type="file"]:hover {
                border-color: #3498db;
                background: #e3f2fd;
            }
            
            input[type="file"]:focus {
                outline: none;
                border-color: #3498db;
                box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
            }
            
            .file-drop-zone {
                border: 2px dashed #ddd;
                border-radius: 8px;
                padding: 40px;
                text-align: center;
                background: #f8f9fa;
                cursor: pointer;
                transition: all 0.3s;
            }
            
            .file-drop-zone:hover {
                border-color: #3498db;
                background: #e3f2fd;
            }
            
            .file-drop-zone.dragover {
                border-color: #27ae60;
                background: #e8f5e8;
            }
            
            /* Accordion —Å—Ç–∏–ª—ñ */
            .accordion {
                margin-top: 10px;
            }
            
            .accordion-header {
                background: #f8f9fa;
                border: 1px solid #dee2e6;
                border-radius: 5px;
                padding: 15px;
                cursor: pointer;
                display: flex;
                justify-content: space-between;
                align-items: center;
                transition: background-color 0.3s;
            }
            
            .accordion-header:hover {
                background: #e9ecef;
            }
            
            .accordion-header.active {
                background: #e3f2fd;
                border-color: #3498db;
            }
            
            .accordion-toggle {
                font-size: 18px;
                font-weight: bold;
                color: #666;
                transition: transform 0.3s;
            }
            
            .accordion-header.active .accordion-toggle {
                transform: rotate(90deg);
                color: #3498db;
            }
            
            .accordion-content {
                display: none;
                border: 1px solid #dee2e6;
                border-top: none;
                border-radius: 0 0 5px 5px;
                padding: 20px;
                background: white;
            }
            
            .accordion-content.active {
                display: block;
            }
            
            .element-list {
                margin-top: 15px;
            }
            
            .element-item {
                background: #f8f9fa;
                border: 1px solid #e9ecef;
                border-radius: 5px;
                padding: 15px;
                margin-bottom: 10px;
            }
            
            .element-item.problematic {
                border-left: 4px solid #e74c3c;
                background: #fdf2f2;
            }
            
            .element-item.correct {
                border-left: 4px solid #27ae60;
                background: #f0f9f0;
            }
            
            .element-selector {
                font-family: 'Courier New', monospace;
                font-size: 14px;
                color: #2c3e50;
                font-weight: bold;
                margin-bottom: 8px;
            }
            
            .element-html {
                font-family: 'Courier New', monospace;
                font-size: 12px;
                background: #f1f3f4;
                padding: 8px;
                border-radius: 3px;
                margin: 8px 0;
                overflow-x: auto;
                white-space: pre-wrap;
                word-break: break-all;
            }
            
            .element-issue {
                color: #e74c3c;
                font-size: 14px;
                margin-top: 8px;
            }
            
            .element-status {
                color: #27ae60;
                font-size: 14px;
                margin-top: 8px;
            }
            
            .contrast-info {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
                gap: 10px;
                margin-top: 10px;
            }
            
            .contrast-detail {
                background: #f8f9fa;
                padding: 8px;
                border-radius: 3px;
                font-size: 12px;
            }
            
            .color-swatch {
                display: inline-block;
                width: 20px;
                height: 20px;
                border-radius: 3px;
                border: 1px solid #ccc;
                margin-left: 5px;
                vertical-align: middle;
            }
            
            .form-group {
                margin-bottom: 20px;
            }
            
            label {
                display: block;
                margin-bottom: 8px;
                font-weight: 600;
                color: #2c3e50;
            }
            
            input[type="url"] {
                width: 100%;
                padding: 15px;
                border: 2px solid #ddd;
                border-radius: 8px;
                font-size: 16px;
                transition: border-color 0.3s;
            }
            
            input[type="url"]:focus {
                outline: none;
                border-color: #3498db;
                box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
            }
            
            .btn {
                background: linear-gradient(135deg, #3498db 0%, #2980b9 100%);
                color: white;
                padding: 15px 30px;
                border: none;
                border-radius: 8px;
                font-size: 16px;
                font-weight: 600;
                cursor: pointer;
                transition: transform 0.2s, box-shadow 0.2s;
                width: 100%;
            }
            
            .btn:hover {
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(52, 152, 219, 0.3);
            }
            
            .btn:disabled {
                opacity: 0.6;
                cursor: not-allowed;
                transform: none;
            }
            
            .loading {
                display: none;
                text-align: center;
                padding: 20px;
            }
            
            .spinner {
                border: 4px solid #f3f3f3;
                border-top: 4px solid #3498db;
                border-radius: 50%;
                width: 40px;
                height: 40px;
                animation: spin 1s linear infinite;
                margin: 0 auto 10px;
            }
            
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
            
            .results {
                display: none;
                margin-top: 30px;
            }
            
            .score-card {
                background: linear-gradient(135deg, #27ae60 0%, #2ecc71 100%);
                color: white;
                padding: 30px;
                border-radius: 10px;
                text-align: center;
                margin-bottom: 30px;
            }
            
            .score-value {
                font-size: 3rem;
                font-weight: bold;
                margin-bottom: 10px;
            }
            
            .score-level {
                font-size: 1.2rem;
                margin-bottom: 5px;
            }
            
            .score-description {
                opacity: 0.9;
            }
            
            .metrics-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                gap: 20px;
                margin-bottom: 30px;
            }
            
            .metric-card {
                background: white;
                border: 2px solid #e9ecef;
                border-radius: 10px;
                padding: 20px;
                text-align: center;
                transition: transform 0.2s;
            }
            
            .metric-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 10px 25px rgba(0,0,0,0.1);
            }
            
            .metric-name {
                font-weight: 600;
                color: #2c3e50;
                margin-bottom: 10px;
            }
            
            .metric-value {
                font-size: 2rem;
                font-weight: bold;
                color: #3498db;
            }
            
            .recommendations {
                background: #fff3cd;
                border: 2px solid #ffeaa7;
                border-radius: 10px;
                padding: 20px;
            }
            
            .recommendations h3 {
                color: #856404;
                margin-bottom: 15px;
            }
            
            .detailed-metrics {
                margin: 30px 0;
            }
            
            .metric-section {
                background: white;
                border: 2px solid #e9ecef;
                border-radius: 10px;
                padding: 20px;
                margin-bottom: 20px;
                box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            }
            
            .metric-section-title {
                color: #2c3e50;
                margin-bottom: 15px;
                font-size: 1.2rem;
                border-bottom: 2px solid #ecf0f1;
                padding-bottom: 10px;
            }
            
            .metric-details {
                display: flex;
                flex-direction: column;
                gap: 15px;
            }
            
            .metric-detail-item {
                display: flex;
                align-items: center;
                gap: 15px;
                padding: 10px;
                background: #f8f9fa;
                border-radius: 8px;
            }
            
            .metric-detail-name {
                flex: 1;
                font-weight: 600;
                color: #2c3e50;
            }
            
            .metric-detail-value {
                font-weight: bold;
                color: #3498db;
                min-width: 60px;
                text-align: right;
            }
            
            .metric-detail-bar {
                flex: 2;
                height: 20px;
                background: #ecf0f1;
                border-radius: 10px;
                overflow: hidden;
                position: relative;
            }
            
            .metric-detail-fill {
                height: 100%;
                border-radius: 10px;
                transition: width 0.5s ease;
                position: relative;
            }
            
            .metric-detail-fill::after {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: linear-gradient(90deg, transparent 0%, rgba(255,255,255,0.3) 50%, transparent 100%);
                animation: shimmer 2s infinite;
            }
            
            @keyframes shimmer {
                0% { transform: translateX(-100%); }
                100% { transform: translateX(100%); }
            }
            
            .recommendation-item {
                background: white;
                border-left: 4px solid #f39c12;
                padding: 15px;
                margin-bottom: 10px;
                border-radius: 5px;
            }
            
            .recommendation-category {
                font-weight: 600;
                color: #e67e22;
                font-size: 0.9rem;
            }
            
            .recommendation-text {
                margin-top: 5px;
                color: #2c3e50;
            }
            
            .error {
                background: #f8d7da;
                border: 2px solid #f5c6cb;
                color: #721c24;
                padding: 20px;
                border-radius: 10px;
                margin-top: 20px;
            }
            
            @media (max-width: 768px) {
                .header h1 {
                    font-size: 2rem;
                }
                
                .main-content {
                    padding: 20px;
                }
                
                .metrics-grid {
                    grid-template-columns: 1fr;
                }
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>–û—Ü—ñ–Ω–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –≤–µ–±—Å–∞–π—Ç—ñ–≤</h1>
                <p>–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –≤–µ–±—Ä–µ—Å—É—Ä—Å—ñ–≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ ISO 25023 —Ç–∞ WCAG</p>
            </div>
            
            <div class="main-content">
                <!-- –í–∫–ª–∞–¥–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –∞–Ω–∞–ª—ñ–∑—É -->
                <div class="tabs">
                    <button class="tab-button active" onclick="switchTab('url')">üåê –ê–Ω–∞–ª—ñ–∑ URL</button>
                    <button class="tab-button" onclick="switchTab('html')">üìÑ –ê–Ω–∞–ª—ñ–∑ HTML</button>
                </div>
                
                <!-- –§–æ—Ä–º–∞ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É URL -->
                <form class="url-form tab-content active" id="urlForm" data-tab="url">
                    <div class="form-group">
                        <label for="url">URL –∞–¥—Ä–µ—Å–∞ –≤–µ–±—Å–∞–π—Ç—É –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É:</label>
                        <input 
                            type="url" 
                            id="url" 
                            name="url" 
                            placeholder="https://example.com" 
                            required
                            aria-describedby="url-help"
                        >
                        <small id="url-help" style="color: #666; margin-top: 5px; display: block;">
                            –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—É URL –∞–¥—Ä–µ—Å—É –≤–∫–ª—é—á–Ω–æ –∑ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º (http:// –∞–±–æ https://)
                        </small>
                    </div>
                    
                    <button type="submit" class="btn" id="analyzeUrlBtn">
                        –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å URL
                    </button>
                </form>
                
                <!-- –§–æ—Ä–º–∞ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É HTML -->
                <form class="url-form tab-content" id="htmlForm" data-tab="html" enctype="multipart/form-data">
                    <div class="form-group">
                        <label for="htmlFile">–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ HTML —Ñ–∞–π–ª:</label>
                        <input 
                            type="file" 
                            id="htmlFile" 
                            name="htmlFile" 
                            accept=".html,.htm"
                            required
                            aria-describedby="html-help"
                        >
                        <small id="html-help" style="color: #666; margin-top: 5px; display: block;">
                            –í–∏–±–µ—Ä—ñ—Ç—å HTML —Ñ–∞–π–ª (.html –∞–±–æ .htm) –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ
                        </small>
                        
                        <!-- –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ —Ñ–∞–π–ª—É -->
                        <div id="filePreview" style="display: none; margin-top: 15px;">
                            <h4>–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥:</h4>
                            <div id="fileInfo" style="background: #f8f9fa; padding: 10px; border-radius: 5px; margin-bottom: 10px;"></div>
                            <textarea 
                                id="htmlContent" 
                                readonly
                                style="height: 200px; font-size: 12px;"
                            ></textarea>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label for="baseUrl">–ë–∞–∑–æ–≤–∏–π URL (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ):</label>
                        <input 
                            type="url" 
                            id="baseUrl" 
                            name="baseUrl" 
                            placeholder="http://localhost" 
                            value="http://localhost"
                            aria-describedby="base-url-help"
                        >
                        <small id="base-url-help" style="color: #666; margin-top: 5px; display: block;">
                            –ë–∞–∑–æ–≤–∏–π URL –¥–ª—è –≤—ñ–¥–Ω–æ—Å–Ω–∏—Ö –ø–æ—Å–∏–ª–∞–Ω—å —É HTML
                        </small>
                    </div>
                    
                    <div class="form-group">
                        <label for="pageTitle">–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ):</label>
                        <input 
                            type="text" 
                            id="pageTitle" 
                            name="pageTitle" 
                            placeholder="HTML Document" 
                            value="HTML Document"
                            aria-describedby="title-help"
                        >
                        <small id="title-help" style="color: #666; margin-top: 5px; display: block;">
                            –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –∑–≤—ñ—Ç—ñ
                        </small>
                    </div>
                    
                    <button type="submit" class="btn" id="analyzeHtmlBtn">
                        –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ HTML –∫–æ–Ω—Ç–µ–Ω—Ç
                    </button>
                </form>
                
                <div class="loading" id="loading">
                    <div class="spinner"></div>
                    <p>–ê–Ω–∞–ª—ñ–∑—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –≤–µ–±—Å–∞–π—Ç—É...</p>
                    <p style="font-size: 0.9rem; color: #666; margin-top: 10px;">
                        –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω
                    </p>
                </div>
                
                <div class="results" id="results">
                    <!-- –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –±—É–¥—É—Ç—å –≤—Å—Ç–∞–≤–ª–µ–Ω—ñ —Ç—É—Ç —á–µ—Ä–µ–∑ JavaScript -->
                </div>
            </div>
        </div>
        
        <script>
            // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –≤–∫–ª–∞–¥–æ–∫
            function switchTab(tabName) {
                // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –≤—Å—ñ –≤–∫–ª–∞–¥–∫–∏
                const tabContents = document.querySelectorAll('.tab-content');
                tabContents.forEach(tab => {
                    tab.classList.remove('active');
                });
                
                // –î–µ–∞–∫—Ç–∏–≤—É—î–º–æ –≤—Å—ñ –∫–Ω–æ–ø–∫–∏ –≤–∫–ª–∞–¥–æ–∫
                const tabButtons = document.querySelectorAll('.tab-button');
                tabButtons.forEach(button => {
                    button.classList.remove('active');
                });
                
                // –ü–æ–∫–∞–∑—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—É –≤–∫–ª–∞–¥–∫—É
                const activeTab = document.querySelector(`[data-tab="${tabName}"]`);
                if (activeTab) {
                    activeTab.classList.add('active');
                }
                
                // –ê–∫—Ç–∏–≤—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–Ω–æ–ø–∫—É
                event.target.classList.add('active');
                
                console.log('–ü–µ—Ä–µ–º–∫–Ω—É—Ç–æ –Ω–∞ –≤–∫–ª–∞–¥–∫—É:', tabName);
            }
            
            // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è DOM
            document.addEventListener('DOMContentLoaded', function() {
                console.log('DOM –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ, –¥–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π');
                
                const urlForm = document.getElementById('urlForm');
                const htmlForm = document.getElementById('htmlForm');
                const loadingDiv = document.getElementById('loading');
                const resultsDiv = document.getElementById('results');
                
                // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è URL —Ñ–æ—Ä–º–∏
                if (urlForm) {
                    urlForm.addEventListener('submit', async function(e) {
                        e.preventDefault();
                        console.log('URL —Ñ–æ—Ä–º–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞');
                        
                        const urlInput = document.getElementById('url');
                        const analyzeBtn = document.getElementById('analyzeUrlBtn');
                        const url = urlInput.value.trim();
                        
                        if (!url) {
                            alert('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å URL –∞–¥—Ä–µ—Å—É');
                            return;
                        }
                        
                        await performAnalysis('/api/evaluate', { url: url }, analyzeBtn, '–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å URL');
                    });
                }
                
                // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è HTML —Ñ–æ—Ä–º–∏
                if (htmlForm) {
                    const htmlFileInput = document.getElementById('htmlFile');
                    const filePreview = document.getElementById('filePreview');
                    const fileInfo = document.getElementById('fileInfo');
                    const htmlContent = document.getElementById('htmlContent');
                    
                    // –û–±—Ä–æ–±–Ω–∏–∫ –∑–º—ñ–Ω–∏ —Ñ–∞–π–ª—É
                    htmlFileInput.addEventListener('change', function(e) {
                        const file = e.target.files[0];
                        if (file) {
                            handleFileSelect(file);
                        }
                    });
                    
                    // –§—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ –≤–∏–±—Ä–∞–Ω–æ–≥–æ —Ñ–∞–π–ª—É
                    function handleFileSelect(file) {
                        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—É —Ñ–∞–π–ª—É
                        if (!file.name.match(/\.(html|htm)$/i)) {
                            alert('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å HTML —Ñ–∞–π–ª (.html –∞–±–æ .htm)');
                            return;
                        }
                        
                        // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ñ–∞–π–ª
                        fileInfo.innerHTML = `
                            <strong>–§–∞–π–ª:</strong> ${file.name}<br>
                            <strong>–†–æ–∑–º—ñ—Ä:</strong> ${(file.size / 1024).toFixed(2)} KB<br>
                            <strong>–¢–∏–ø:</strong> ${file.type || 'text/html'}
                        `;
                        
                        // –ß–∏—Ç–∞—î–º–æ –≤–º—ñ—Å—Ç —Ñ–∞–π–ª—É
                        const reader = new FileReader();
                        reader.onload = function(e) {
                            const content = e.target.result;
                            htmlContent.value = content;
                            filePreview.style.display = 'block';
                            
                            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–ø–æ–≤–Ω—é—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑ HTML
                            const titleMatch = content.match(/<title[^>]*>([^<]+)<\/title>/i);
                            if (titleMatch) {
                                document.getElementById('pageTitle').value = titleMatch[1].trim();
                            }
                        };
                        reader.readAsText(file);
                    }
                    
                    htmlForm.addEventListener('submit', async function(e) {
                        e.preventDefault();
                        console.log('HTML —Ñ–æ—Ä–º–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞');
                        
                        const htmlContentInput = document.getElementById('htmlContent');
                        const baseUrlInput = document.getElementById('baseUrl');
                        const pageTitleInput = document.getElementById('pageTitle');
                        const analyzeBtn = document.getElementById('analyzeHtmlBtn');
                        
                        const htmlContentValue = htmlContentInput.value.trim();
                        const baseUrl = baseUrlInput.value.trim() || 'http://localhost';
                        const title = pageTitleInput.value.trim() || 'HTML Document';
                        
                        if (!htmlContentValue) {
                            alert('–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ HTML —Ñ–∞–π–ª');
                            return;
                        }
                        
                        await performAnalysis('/api/evaluate-html', {
                            html_content: htmlContentValue,
                            base_url: baseUrl,
                            title: title
                        }, analyzeBtn, '–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ HTML –∫–æ–Ω—Ç–µ–Ω—Ç');
                    });
                }
                
                // –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∞–Ω–∞–ª—ñ–∑—É
                async function performAnalysis(endpoint, data, button, originalButtonText) {
                    // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                    loadingDiv.style.display = 'block';
                    resultsDiv.style.display = 'none';
                    button.disabled = true;
                    button.textContent = '–ê–Ω–∞–ª—ñ–∑—É—î–º–æ...';
                    
                    try {
                        console.log('–í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –¥–æ API:', endpoint);
                        
                        const response = await fetch(endpoint, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'Accept': 'application/json'
                            },
                            body: JSON.stringify(data)
                        });
                        
                        console.log('–û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:', response.status);
                        
                        if (!response.ok) {
                            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                        }
                        
                        const result = await response.json();
                        console.log('–î–∞–Ω—ñ –æ—Ç—Ä–∏–º–∞–Ω–æ:', result);
                        
                        if (result.status === 'success') {
                            displayResults(result);
                        } else {
                            displayError(result.error || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
                        }
                        
                    } catch (error) {
                        console.error('–ü–æ–º–∏–ª–∫–∞:', error);
                        displayError('–ü–æ–º–∏–ª–∫–∞ –∑—î–¥–Ω–∞–Ω–Ω—è: ' + error.message);
                    } finally {
                        loadingDiv.style.display = 'none';
                        button.disabled = false;
                        button.textContent = originalButtonText;
                    }
                }
            });
            
            function displayResults(data) {
                const resultsDiv = document.getElementById('results');
                
                // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É –¥–ª—è —Å–∫–æ—Ä—É
                const scoreColor = getScoreColor(data.final_score);
                
                resultsDiv.innerHTML = `
                    <div class="score-card" style="background: linear-gradient(135deg, ${scoreColor} 0%, ${scoreColor}dd 100%);">
                        <div class="score-value">${(data.final_score * 100).toFixed(1)}%</div>
                        <div class="score-level">${data.quality_level}</div>
                        <div class="score-description">${data.quality_description}</div>
                        <div style="margin-top: 15px; font-size: 0.9rem; opacity: 0.9;">
                            –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ: ${data.url}
                        </div>
                    </div>
                    
                    <div class="detailed-metrics">
                        <h3 style="margin-bottom: 20px; color: #2c3e50;">–î–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –ø–æ –º–µ—Ç—Ä–∏–∫–∞—Ö</h3>
                        
                        <!-- –ü–µ—Ä—Ü–µ–ø—Ç–∏–≤–Ω—ñ—Å—Ç—å -->
                        <div class="metric-section">
                            <h4 class="metric-section-title">
                                üîç –ü–µ—Ä—Ü–µ–ø—Ç–∏–≤–Ω—ñ—Å—Ç—å (${(data.subscores.perceptibility * 100).toFixed(1)}%)
                            </h4>
                            <div class="metric-details">
                                <div class="metric-detail-item">
                                    <span class="metric-detail-name">–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π —Ç–µ–∫—Å—Ç:</span>
                                    <span class="metric-detail-value">${(data.metrics.alt_text * 100).toFixed(1)}%</span>
                                    <div class="metric-detail-bar">
                                        <div class="metric-detail-fill" style="width: ${data.metrics.alt_text * 100}%; background: ${getScoreColor(data.metrics.alt_text)};"></div>
                                    </div>
                                    <div class="accordion">
                                        <div class="accordion-header" onclick="toggleAccordion(this)">
                                            <span>–î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω—å</span>
                                            <span class="accordion-toggle">‚ñ∂</span>
                                        </div>
                                        <div class="accordion-content">
                                            ${generateAltTextDetails(data.detailed_analysis?.alt_text)}
                                        </div>
                                    </div>
                                </div>
                                <div class="metric-detail-item">
                                    <span class="metric-detail-name">–ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ñ—Å—Ç—å —Ç–µ–∫—Å—Ç—É:</span>
                                    <span class="metric-detail-value">${(data.metrics.contrast * 100).toFixed(1)}%</span>
                                    <div class="metric-detail-bar">
                                        <div class="metric-detail-fill" style="width: ${data.metrics.contrast * 100}%; background: ${getScoreColor(data.metrics.contrast)};"></div>
                                    </div>
                                    <div class="accordion">
                                        <div class="accordion-header" onclick="toggleAccordion(this)">
                                            <span>–î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∫–æ–Ω—Ç—Ä–∞—Å—Ç—É</span>
                                            <span class="accordion-toggle">‚ñ∂</span>
                                        </div>
                                        <div class="accordion-content">
                                            ${generateContrastDetails(data.detailed_analysis?.contrast)}
                                        </div>
                                    </div>
                                </div>
                                <div class="metric-detail-item">
                                    <span class="metric-detail-name">–î–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –º–µ–¥—ñ–∞:</span>
                                    <span class="metric-detail-value">${(data.metrics.media_accessibility * 100).toFixed(1)}%</span>
                                    <div class="metric-detail-bar">
                                        <div class="metric-detail-fill" style="width: ${data.metrics.media_accessibility * 100}%; background: ${getScoreColor(data.metrics.media_accessibility)};"></div>
                                    </div>
                                    <div class="accordion">
                                        <div class="accordion-header" onclick="toggleAccordion(this)">
                                            <span>–î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –º–µ–¥—ñ–∞ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤</span>
                                            <span class="accordion-toggle">‚ñ∂</span>
                                        </div>
                                        <div class="accordion-content">
                                            ${generateMediaDetails(data.detailed_analysis?.media_accessibility)}
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- –ö–µ—Ä–æ–≤–∞–Ω—ñ—Å—Ç—å -->
                        <div class="metric-section">
                            <h4 class="metric-section-title">
                                ‚å®Ô∏è –ö–µ—Ä–æ–≤–∞–Ω—ñ—Å—Ç—å (${(data.subscores.operability * 100).toFixed(1)}%)
                            </h4>
                            <div class="metric-details">
                                <div class="metric-detail-item">
                                    <span class="metric-detail-name">–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–Ω–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è:</span>
                                    <span class="metric-detail-value">${(data.metrics.keyboard_navigation * 100).toFixed(1)}%</span>
                                    <div class="metric-detail-bar">
                                        <div class="metric-detail-fill" style="width: ${data.metrics.keyboard_navigation * 100}%; background: ${getScoreColor(data.metrics.keyboard_navigation)};"></div>
                                    </div>
                                    <div class="accordion">
                                        <div class="accordion-header" onclick="toggleAccordion(this)">
                                            <span>–î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–Ω–æ—ó –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó</span>
                                            <span class="accordion-toggle">‚ñ∂</span>
                                        </div>
                                        <div class="accordion-content">
                                            ${generateKeyboardDetails(data.detailed_analysis?.keyboard_navigation)}
                                        </div>
                                    </div>
                                </div>
                                <div class="metric-detail-item">
                                    <span class="metric-detail-name">–°—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è:</span>
                                    <span class="metric-detail-value">${(data.metrics.structured_navigation * 100).toFixed(1)}%</span>
                                    <div class="metric-detail-bar">
                                        <div class="metric-detail-fill" style="width: ${data.metrics.structured_navigation * 100}%; background: ${getScoreColor(data.metrics.structured_navigation)};"></div>
                                    </div>
                                    <div class="accordion">
                                        <div class="accordion-header" onclick="toggleAccordion(this)">
                                            <span>–î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤</span>
                                            <span class="accordion-toggle">‚ñ∂</span>
                                        </div>
                                        <div class="accordion-content">
                                            ${generateHeadingsDetails(data.detailed_analysis?.structured_navigation)}
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- –ó—Ä–æ–∑—É–º—ñ–ª—ñ—Å—Ç—å -->
                        <div class="metric-section">
                            <h4 class="metric-section-title">
                                üí° –ó—Ä–æ–∑—É–º—ñ–ª—ñ—Å—Ç—å (${(data.subscores.understandability * 100).toFixed(1)}%)
                            </h4>
                            <div class="metric-details">
                                <div class="metric-detail-item">
                                    <span class="metric-detail-name">–ó—Ä–æ–∑—É–º—ñ–ª—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó:</span>
                                    <span class="metric-detail-value">${(data.metrics.instruction_clarity * 100).toFixed(1)}%</span>
                                    <div class="metric-detail-bar">
                                        <div class="metric-detail-fill" style="width: ${data.metrics.instruction_clarity * 100}%; background: ${getScoreColor(data.metrics.instruction_clarity)};"></div>
                                    </div>
                                    <div class="accordion">
                                        <div class="accordion-header" onclick="toggleAccordion(this)">
                                            <span>–î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π</span>
                                            <span class="accordion-toggle">‚ñ∂</span>
                                        </div>
                                        <div class="accordion-content">
                                            ${generateInstructionsDetails(data.detailed_analysis?.instruction_clarity)}
                                        </div>
                                    </div>
                                </div>
                                <div class="metric-detail-item">
                                    <span class="metric-detail-name">–î–æ–ø–æ–º–æ–≥–∞ –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–Ω—ñ:</span>
                                    <span class="metric-detail-value">${(data.metrics.input_assistance * 100).toFixed(1)}%</span>
                                    <div class="metric-detail-bar">
                                        <div class="metric-detail-fill" style="width: ${data.metrics.input_assistance * 100}%; background: ${getScoreColor(data.metrics.input_assistance)};"></div>
                                    </div>
                                    <div class="accordion">
                                        <div class="accordion-header" onclick="toggleAccordion(this)">
                                            <span>–î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –ø–æ–ª—ñ–≤ –≤–≤–æ–¥—É</span>
                                            <span class="accordion-toggle">‚ñ∂</span>
                                        </div>
                                        <div class="accordion-content">
                                            ${generateInputAssistanceDetails(data.detailed_analysis?.input_assistance)}
                                        </div>
                                    </div>
                                </div>
                                <div class="metric-detail-item">
                                    <span class="metric-detail-name">–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –ø–æ–º–∏–ª–æ–∫:</span>
                                    <span class="metric-detail-value">${(data.metrics.error_support * 100).toFixed(1)}%</span>
                                    <div class="metric-detail-bar">
                                        <div class="metric-detail-fill" style="width: ${data.metrics.error_support * 100}%; background: ${getScoreColor(data.metrics.error_support)};"></div>
                                    </div>
                                    <div class="accordion">
                                        <div class="accordion-header" onclick="toggleAccordion(this)">
                                            <span>–î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫</span>
                                            <span class="accordion-toggle">‚ñ∂</span>
                                        </div>
                                        <div class="accordion-content">
                                            ${generateErrorSupportDetails(data.detailed_analysis?.error_support)}
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- –õ–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è -->
                        <div class="metric-section">
                            <h4 class="metric-section-title">
                                üåç –õ–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è (${(data.subscores.localization * 100).toFixed(1)}%)
                            </h4>
                            <div class="metric-details">
                                <div class="metric-detail-item">
                                    <span class="metric-detail-name">–ë–∞–≥–∞—Ç–æ–º–æ–≤–Ω—ñ—Å—Ç—å:</span>
                                    <span class="metric-detail-value">${(data.metrics.localization * 100).toFixed(1)}%</span>
                                    <div class="metric-detail-bar">
                                        <div class="metric-detail-fill" style="width: ${data.metrics.localization * 100}%; background: ${getScoreColor(data.metrics.localization)};"></div>
                                    </div>
                                    <div class="accordion">
                                        <div class="accordion-header" onclick="toggleAccordion(this)">
                                            <span>–î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó</span>
                                            <span class="accordion-toggle">‚ñ∂</span>
                                        </div>
                                        <div class="accordion-content">
                                            ${generateLocalizationDetails(data.detailed_analysis?.localization)}
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    ${data.recommendations.length > 0 ? `
                        <div class="recommendations">
                            <h3>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è</h3>
                            ${data.recommendations.map(rec => `
                                <div class="recommendation-item">
                                    <div class="recommendation-category">${rec.category} - ${rec.priority} –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç</div>
                                    <div class="recommendation-text">${rec.recommendation}</div>
                                    <small style="color: #666;">WCAG: ${rec.wcag_reference}</small>
                                </div>
                            `).join('')}
                        </div>
                    ` : ''}
                `;
                
                resultsDiv.style.display = 'block';
            }
            
            function displayError(errorMessage) {
                const resultsDiv = document.getElementById('results');
                resultsDiv.innerHTML = `
                    <div class="error">
                        <h3>–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É</h3>
                        <p>${errorMessage}</p>
                        <p style="margin-top: 10px; font-size: 0.9rem;">
                            –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å URL –∞–¥—Ä–µ—Å–∏ —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.
                        </p>
                    </div>
                `;
                resultsDiv.style.display = 'block';
            }
            
            function getScoreColor(score) {
                if (score >= 0.618) return '#27ae60';  // –í—ñ–¥–º—ñ–Ω–Ω–æ - –∑–µ–ª–µ–Ω–∏–π
                if (score >= 0.382) return '#3498db';  // –î–æ–±—Ä–µ - —Å–∏–Ω—ñ–π
                if (score >= 0.236) return '#f39c12';  // –ó–∞–¥–æ–≤—ñ–ª—å–Ω–æ - –ø–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π
                if (score >= 0.146) return '#e74c3c';  // –ü–æ–≥–∞–Ω–æ - —á–µ—Ä–≤–æ–Ω–∏–π
                return '#95a5a6';  // –î—É–∂–µ –ø–æ–≥–∞–Ω–æ - —Å—ñ—Ä–∏–π
            }
            
            // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è accordion
            function toggleAccordion(header) {
                const content = header.nextElementSibling;
                const isActive = header.classList.contains('active');
                
                if (isActive) {
                    header.classList.remove('active');
                    content.classList.remove('active');
                } else {
                    header.classList.add('active');
                    content.classList.add('active');
                }
            }
            
            // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É alt-text
            function generateAltTextDetails(details) {
                if (!details) return '<p>–î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</p>';
                
                let html = `
                    <div class="score-explanation">
                        <strong>${details.score_explanation}</strong>
                    </div>
                `;
                
                if (details.problematic_images && details.problematic_images.length > 0) {
                    html += `
                        <h4 style="color: #e74c3c; margin-top: 20px;">‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (${details.problematic_images.length}):</h4>
                        <div class="element-list">
                    `;
                    
                    details.problematic_images.forEach(img => {
                        html += `
                            <div class="element-item problematic">
                                <div class="element-selector">${img.selector}</div>
                                <div class="element-html">${escapeHtml(img.html)}</div>
                                <div class="element-issue"><strong>–ü—Ä–æ–±–ª–µ–º–∞:</strong> ${img.issue}</div>
                            </div>
                        `;
                    });
                    
                    html += '</div>';
                }
                
                if (details.correct_images_list && details.correct_images_list.length > 0) {
                    html += `
                        <h4 style="color: #27ae60; margin-top: 20px;">‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (${details.correct_images_list.length}):</h4>
                        <div class="element-list">
                    `;
                    
                    details.correct_images_list.forEach(img => {
                        html += `
                            <div class="element-item correct">
                                <div class="element-selector">${img.selector}</div>
                                <div class="element-html">${escapeHtml(img.html)}</div>
                                <div class="element-status"><strong>Alt —Ç–µ–∫—Å—Ç:</strong> "${img.alt_text}"</div>
                            </div>
                        `;
                    });
                    
                    html += '</div>';
                }
                
                return html;
            }
            
            // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É –∫–æ–Ω—Ç—Ä–∞—Å—Ç—É
            function generateContrastDetails(details) {
                if (!details) return '<p>–î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</p>';
                
                let html = `
                    <div class="score-explanation">
                        <strong>${details.score_explanation}</strong>
                    </div>
                `;
                
                if (details.problematic_elements && details.problematic_elements.length > 0) {
                    html += `
                        <h4 style="color: #e74c3c; margin-top: 20px;">‚ùå –ï–ª–µ–º–µ–Ω—Ç–∏ –∑ –Ω–∏–∑—å–∫–∏–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–æ–º (${details.problematic_elements.length}):</h4>
                        <div class="element-list">
                    `;
                    
                    details.problematic_elements.forEach(elem => {
                        html += `
                            <div class="element-item problematic">
                                <div class="element-selector">${elem.selector}</div>
                                <div class="element-html">${escapeHtml(elem.html)}</div>
                                <div class="contrast-info">
                                    <div class="contrast-detail">
                                        <strong>–ü–æ—Ç–æ—á–Ω–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç:</strong> ${elem.contrast_ratio}
                                    </div>
                                    <div class="contrast-detail">
                                        <strong>–ù–µ–æ–±—Ö—ñ–¥–Ω–∏–π:</strong> ${elem.required_ratio}
                                    </div>
                                    <div class="contrast-detail">
                                        <strong>–ö–æ–ª—ñ—Ä —Ç–µ–∫—Å—Ç—É:</strong> ${elem.foreground}
                                        <span class="color-swatch" style="background-color: ${elem.foreground}"></span>
                                    </div>
                                    <div class="contrast-detail">
                                        <strong>–ö–æ–ª—ñ—Ä —Ñ–æ–Ω—É:</strong> ${elem.background}
                                        <span class="color-swatch" style="background-color: ${elem.background}"></span>
                                    </div>
                                </div>
                            </div>
                        `;
                    });
                    
                    html += '</div>';
                }
                
                if (details.correct_elements_list && details.correct_elements_list.length > 0) {
                    html += `
                        <h4 style="color: #27ae60; margin-top: 20px;">‚úÖ –ï–ª–µ–º–µ–Ω—Ç–∏ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–æ–º (${details.correct_elements_list.length}):</h4>
                        <div class="element-list">
                    `;
                    
                    details.correct_elements_list.slice(0, 5).forEach(elem => { // –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ 5
                        html += `
                            <div class="element-item correct">
                                <div class="element-selector">${elem.selector}</div>
                                <div class="element-html">${escapeHtml(elem.html)}</div>
                                <div class="element-status">${elem.status}</div>
                            </div>
                        `;
                    });
                    
                    if (details.correct_elements_list.length > 5) {
                        html += `<p style="text-align: center; color: #666; margin-top: 10px;">... —Ç–∞ —â–µ ${details.correct_elements_list.length - 5} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤</p>`;
                    }
                    
                    html += '</div>';
                }
                
                return html;
            }
            
            // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
            function generateHeadingsDetails(details) {
                if (!details) return '<p>–î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</p>';
                
                let html = `
                    <div class="score-explanation">
                        <strong>${details.score_explanation}</strong>
                    </div>
                `;
                
                if (details.problematic_headings && details.problematic_headings.length > 0) {
                    html += `
                        <h4 style="color: #e74c3c; margin-top: 20px;">‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (${details.problematic_headings.length}):</h4>
                        <div class="element-list">
                    `;
                    
                    details.problematic_headings.forEach(heading => {
                        html += `
                            <div class="element-item problematic">
                                <div class="element-selector">${heading.selector}</div>
                                <div class="element-html">${escapeHtml(heading.html)}</div>
                                <div class="element-issue"><strong>–ü—Ä–∞–≤–∏–ª–æ:</strong> ${heading.rule}</div>
                                <div class="element-issue"><strong>–ü—Ä–æ–±–ª–µ–º–∞:</strong> ${heading.issue}</div>
                            </div>
                        `;
                    });
                    
                    html += '</div>';
                }
                
                if (details.correct_headings_list && details.correct_headings_list.length > 0) {
                    html += `
                        <h4 style="color: #27ae60; margin-top: 20px;">‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (${details.correct_headings_list.length}):</h4>
                        <div class="element-list">
                    `;
                    
                    details.correct_headings_list.forEach(heading => {
                        html += `
                            <div class="element-item correct">
                                <div class="element-selector">${heading.selector}</div>
                                <div class="element-html">${escapeHtml(heading.html)}</div>
                                <div class="element-status"><strong>–ü—Ä–∞–≤–∏–ª–æ:</strong> ${heading.rule} - ${heading.status}</div>
                            </div>
                        `;
                    });
                    
                    html += '</div>';
                }
                
                return html;
            }
            
            // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–Ω–æ—ó –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
            function generateKeyboardDetails(details) {
                if (!details) return '<p>–î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</p>';
                
                let html = `
                    <div class="score-explanation">
                        <strong>${details.score_explanation}</strong>
                    </div>
                `;
                
                if (details.total_elements > 0) {
                    html += `
                        <div style="margin-top: 15px;">
                            <p><strong>–í—Å—å–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤:</strong> ${details.total_elements}</p>
                            <p><strong>–î–æ—Å—Ç—É–ø–Ω–∏—Ö –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏:</strong> ${details.accessible_elements}</p>
                        </div>
                    `;
                    
                    if (details.accessible_elements_list && details.accessible_elements_list.length > 0) {
                        html += `
                            <h4 style="color: #27ae60; margin-top: 20px;">‚úÖ –î–æ—Å—Ç—É–ø–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ (${details.accessible_elements_list.length}):</h4>
                            <div class="element-list">
                        `;
                        
                        details.accessible_elements_list.forEach(element => {
                            html += `
                                <div class="element-item correct">
                                    <div class="element-selector">
                                        <strong>–°–µ–ª–µ–∫—Ç–æ—Ä:</strong> ${element.selector || '–Ω–µ–≤—ñ–¥–æ–º–æ'}
                                    </div>
                                    <div class="element-html">${escapeHtml(element.html || 'HTML –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π')}</div>
                                    <div class="element-status">
                                        <strong>–ü—Ä–∞–≤–∏–ª–æ:</strong> ${element.rule || '–Ω–µ–≤—ñ–¥–æ–º–æ'}
                                    </div>
                                    <div class="element-status">
                                        <strong>–°—Ç–∞—Ç—É—Å:</strong> ${element.status || '–î–æ—Å—Ç—É–ø–Ω–∏–π –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏'}
                                    </div>
                                </div>
                            `;
                        });
                        
                        html += '</div>';
                    }
                    
                    if (details.problematic_elements && details.problematic_elements.length > 0) {
                        html += `
                            <h4 style="color: #e74c3c; margin-top: 20px;">‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ (${details.problematic_elements.length}):</h4>
                            <div class="element-list">
                        `;
                        
                        details.problematic_elements.forEach(element => {
                            html += `
                                <div class="element-item problematic">
                                    <div class="element-selector">
                                        <strong>–°–µ–ª–µ–∫—Ç–æ—Ä:</strong> ${element.selector || '–Ω–µ–≤—ñ–¥–æ–º–æ'}
                                    </div>
                                    <div class="element-html">${escapeHtml(element.html || 'HTML –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π')}</div>
                                    <div class="element-issue">
                                        <strong>–ü—Ä–∞–≤–∏–ª–æ:</strong> ${element.rule || '–Ω–µ–≤—ñ–¥–æ–º–æ'}
                                    </div>
                                    <div class="element-issue">
                                        <strong>–ü—Ä–æ–±–ª–µ–º–∞:</strong> ${element.issue || '–ü—Ä–æ–±–ª–µ–º–∞ –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–Ω–æ—é –Ω–∞–≤—ñ–≥–∞—Ü—ñ—î—é'}
                                    </div>
                                </div>
                            `;
                        });
                        
                        html += '</div>';
                    }
                } else {
                    html += `
                        <p style="color: #666; margin-top: 15px;">
                            –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –¥–ª—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–Ω–æ—ó –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ axe-core —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö.
                            –¶–µ –º–æ–∂–µ –æ–∑–Ω–∞—á–∞—Ç–∏, —â–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –Ω–µ–º–∞—î –µ–ª–µ–º–µ–Ω—Ç—ñ–≤, —è–∫—ñ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–Ω–æ—ó –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó,
                            –∞–±–æ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ —î —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–º–∏ —Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∏–º–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º.
                        </p>
                    `;
                }
                
                return html;
            }
            
            // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É –º–µ–¥—ñ–∞ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
            function generateMediaDetails(details) {
                if (!details) return '<p>–î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</p>';
                
                let html = `
                    <div class="score-explanation">
                        <strong>${details.score_explanation}</strong>
                    </div>
                `;
                
                if (details.total_media > 0) {
                    html += `
                        <div style="margin-top: 15px;">
                            <p><strong>–í—Å—å–æ–≥–æ –≤—ñ–¥–µ–æ:</strong> ${details.total_media}</p>
                            <p><strong>–î–æ—Å—Ç—É–ø–Ω–∏—Ö:</strong> ${details.accessible_media}</p>
                        </div>
                    `;
                    
                    if (details.accessible_media_list && details.accessible_media_list.length > 0) {
                        html += `
                            <h4 style="color: #27ae60; margin-top: 20px;">‚úÖ –î–æ—Å—Ç—É–ø–Ω—ñ –≤—ñ–¥–µ–æ (${details.accessible_media_list.length}):</h4>
                            <div class="element-list">
                        `;
                        
                        details.accessible_media_list.forEach(video => {
                            html += `
                                <div class="element-item correct">
                                    <div class="element-selector">
                                        <strong>–¢–∏–ø:</strong> ${video.type || '–Ω–µ–≤—ñ–¥–æ–º–æ'} (${video.platform || 'native'})
                                    </div>
                                    <div class="element-selector">
                                        <strong>–ù–∞–∑–≤–∞:</strong> ${video.title || '–ë–µ–∑ –Ω–∞–∑–≤–∏'}
                                    </div>
                                    <div class="element-html">${escapeHtml(video.html || 'HTML –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π')}</div>
                                    <div class="element-status">
                                        <strong>URL:</strong> ${video.src ? video.src.substring(0, 80) + (video.src.length > 80 ? '...' : '') : '–ù–µ–º–∞—î URL'}
                                    </div>
                                    <div class="element-status">
                                        <strong>–°—Ç–∞—Ç—É—Å:</strong> ${video.status || '–î–æ—Å—Ç—É–ø–Ω–µ –≤—ñ–¥–µ–æ'}
                                    </div>
                                </div>
                            `;
                        });
                        
                        html += '</div>';
                    }
                    
                    if (details.problematic_media && details.problematic_media.length > 0) {
                        html += `
                            <h4 style="color: #e74c3c; margin-top: 20px;">‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ñ –≤—ñ–¥–µ–æ (${details.problematic_media.length}):</h4>
                            <div class="element-list">
                        `;
                        
                        details.problematic_media.forEach(video => {
                            html += `
                                <div class="element-item problematic">
                                    <div class="element-selector">
                                        <strong>–¢–∏–ø:</strong> ${video.type || '–Ω–µ–≤—ñ–¥–æ–º–æ'} (${video.platform || 'native'})
                                    </div>
                                    <div class="element-selector">
                                        <strong>–ù–∞–∑–≤–∞:</strong> ${video.title || '–ë–µ–∑ –Ω–∞–∑–≤–∏'}
                                    </div>
                                    <div class="element-html">${escapeHtml(video.html || 'HTML –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π')}</div>
                                    <div class="element-issue">
                                        <strong>URL:</strong> ${video.src ? video.src.substring(0, 80) + (video.src.length > 80 ? '...' : '') : '–ù–µ–º–∞—î URL'}
                                    </div>
                                    <div class="element-issue">
                                        <strong>–ü—Ä–æ–±–ª–µ–º–∞:</strong> ${video.issue || '–ü—Ä–æ–±–ª–µ–º–∞ –∑ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—é –º–µ–¥—ñ–∞'}
                                    </div>
                                </div>
                            `;
                        });
                        
                        html += '</div>';
                    }
                } else {
                    html += `
                        <p style="color: #666; margin-top: 15px;">
                            –í—ñ–¥–µ–æ –µ–ª–µ–º–µ–Ω—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ. –ê–Ω–∞–ª—ñ–∑ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –º–µ–¥—ñ–∞ –≤–∫–ª—é—á–∞—î –ø–µ—Ä–µ–≤—ñ—Ä–∫—É 
                            –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Å—É–±—Ç–∏—Ç—Ä—ñ–≤, –∞—É–¥—ñ–æ–æ–ø–∏—Å—ñ–≤ —Ç–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤ –¥–ª—è –≤—ñ–¥–µ–æ —Ç–∞ –∞—É–¥—ñ–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É.
                        </p>
                    `;
                }
                
                return html;
            }
            
            // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π
            function generateInstructionsDetails(details) {
                if (!details) return '<p>–î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</p>';
                
                let html = `
                    <div class="score-explanation">
                        <strong>${details.score_explanation}</strong>
                    </div>
                `;
                
                if (details.total_instructions > 0) {
                    html += `
                        <div style="margin-top: 15px;">
                            <p><strong>–í—Å—å–æ–≥–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π –∑–Ω–∞–π–¥–µ–Ω–æ:</strong> ${details.total_instructions}</p>
                            <p><strong>–ó—Ä–æ–∑—É–º—ñ–ª–∏—Ö —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π:</strong> ${details.clear_instructions}</p>
                        </div>
                    `;
                    
                    if (details.problematic_instructions && details.problematic_instructions.length > 0) {
                        html += `
                            <h4 style="color: #e74c3c; margin-top: 20px;">‚ùå –ù–µ–∑—Ä–æ–∑—É–º—ñ–ª—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó (${details.problematic_instructions.length}):</h4>
                            <div class="element-list">
                        `;
                        
                        details.problematic_instructions.forEach(instruction => {
                            html += `
                                <div class="element-item problematic">
                                    <div class="element-selector">
                                        <strong>–¢–∏–ø:</strong> ${instruction.element_type || '–Ω–µ–≤—ñ–¥–æ–º–æ'}
                                    </div>
                                    <div class="element-html">
                                        <strong>–¢–µ–∫—Å—Ç:</strong> "${escapeHtml(instruction.text || '–¢–µ–∫—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π')}"
                                    </div>
                                    <div class="element-issue">
                                        <strong>–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü—ñ–Ω–∫–∏:</strong> ‚ùå –ù–µ–∑—Ä–æ–∑—É–º—ñ–ª–æ
                                    </div>
                                    <div class="element-issue">
                                        <strong>–ü—Ä–∏—á–∏–Ω–∞:</strong> ${instruction.issue || '–°–∫–ª–∞–¥–Ω–∞ –¥–ª—è —Ä–æ–∑—É–º—ñ–Ω–Ω—è'}
                                    </div>
                                </div>
                            `;
                        });
                        
                        html += '</div>';
                    }
                    
                    if (details.clear_instructions_list && details.clear_instructions_list.length > 0) {
                        html += `
                            <h4 style="color: #27ae60; margin-top: 20px;">‚úÖ –ó—Ä–æ–∑—É–º—ñ–ª—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó (${details.clear_instructions_list.length}):</h4>
                            <div class="element-list">
                        `;
                        
                        details.clear_instructions_list.forEach(instruction => {
                            html += `
                                <div class="element-item correct">
                                    <div class="element-selector">
                                        <strong>–¢–∏–ø:</strong> ${instruction.element_type || '–Ω–µ–≤—ñ–¥–æ–º–æ'}
                                    </div>
                                    <div class="element-html">
                                        <strong>–¢–µ–∫—Å—Ç:</strong> "${escapeHtml(instruction.text || '–¢–µ–∫—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π')}"
                                    </div>
                                    <div class="element-status">
                                        <strong>–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü—ñ–Ω–∫–∏:</strong> ‚úÖ –ó—Ä–æ–∑—É–º—ñ–ª–æ
                                    </div>
                                    <div class="element-status">
                                        <strong>–°—Ç–∞—Ç—É—Å:</strong> ${instruction.status || '–ó—Ä–æ–∑—É–º—ñ–ª–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è'}
                                    </div>
                                </div>
                            `;
                        });
                        
                        html += '</div>';
                    }
                } else {
                    html += `
                        <p style="color: #666; margin-top: 15px;">
                            –ê–Ω–∞–ª—ñ–∑ –∑—Ä–æ–∑—É–º—ñ–ª–æ—Å—Ç—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î textstat –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É –¥–ª—è –æ—Ü—ñ–Ω–∫–∏ 
                            —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ —Ç–µ–∫—Å—Ç—É –∑–∞ —à–∫–∞–ª–æ—é Flesch Reading Ease —Ç–∞ —ñ–Ω—à–∏–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏.
                        </p>
                    `;
                }
                
                return html;
            }
            
            // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É –ø–æ–ª—ñ–≤ –≤–≤–æ–¥—É
            function generateInputAssistanceDetails(details) {
                if (!details) return '<p>–î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</p>';
                
                let html = `
                    <div class="score-explanation">
                        <strong>${details.score_explanation}</strong>
                    </div>
                `;
                
                if (details.total_fields > 0) {
                    html += `
                        <div style="margin-top: 15px;">
                            <p><strong>–í—Å—å–æ–≥–æ –ø–æ–ª—ñ–≤:</strong> ${details.total_fields}</p>
                            <p><strong>–ó –¥–æ–ø–æ–º–æ–≥–æ—é:</strong> ${details.assisted_fields}</p>
                        </div>
                    `;
                    
                    if (details.problematic_fields && details.problematic_fields.length > 0) {
                        html += `
                            <h4 style="color: #e74c3c; margin-top: 20px;">‚ùå –ü–æ–ª—è –±–µ–∑ –¥–æ–ø–æ–º–æ–≥–∏ (${details.problematic_fields.length}):</h4>
                            <div class="element-list">
                        `;
                        
                        details.problematic_fields.forEach(field => {
                            html += `
                                <div class="element-item problematic">
                                    <div class="element-selector">
                                        <strong>–°–µ–ª–µ–∫—Ç–æ—Ä:</strong> ${field.selector || '–Ω–µ–≤—ñ–¥–æ–º–æ'}
                                    </div>
                                    <div class="element-html">${escapeHtml(field.html || 'HTML –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π')}</div>
                                    <div class="element-issue">
                                        <strong>–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü—ñ–Ω–∫–∏:</strong> ‚ùå –ë–µ–∑ –¥–æ–ø–æ–º–æ–≥–∏
                                    </div>
                                    <div class="element-issue">
                                        <strong>–ü—Ä–æ–±–ª–µ–º–∞:</strong> ${field.issue || '–í—ñ–¥—Å—É—Ç–Ω—ñ –ø—ñ–¥–∫–∞–∑–∫–∏'}
                                    </div>
                                </div>
                            `;
                        });
                        
                        html += '</div>';
                    }
                    
                    if (details.assisted_fields_list && details.assisted_fields_list.length > 0) {
                        html += `
                            <h4 style="color: #27ae60; margin-top: 20px;">‚úÖ –ü–æ–ª—è –∑ –¥–æ–ø–æ–º–æ–≥–æ—é (${details.assisted_fields_list.length}):</h4>
                            <div class="element-list">
                        `;
                        
                        details.assisted_fields_list.forEach(field => {
                            html += `
                                <div class="element-item correct">
                                    <div class="element-selector">
                                        <strong>–°–µ–ª–µ–∫—Ç–æ—Ä:</strong> ${field.selector || '–Ω–µ–≤—ñ–¥–æ–º–æ'}
                                    </div>
                                    <div class="element-html">${escapeHtml(field.html || 'HTML –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π')}</div>
                                    <div class="element-status">
                                        <strong>–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü—ñ–Ω–∫–∏:</strong> ‚úÖ –ó –¥–æ–ø–æ–º–æ–≥–æ—é
                                    </div>
                                    <div class="element-status">
                                        <strong>–¢–∏–ø–∏ –¥–æ–ø–æ–º–æ–≥–∏:</strong> ${field.assistance || '–ù–µ–≤—ñ–¥–æ–º–æ'}
                                    </div>
                                </div>
                            `;
                        });
                        
                        html += '</div>';
                    }
                } else {
                    html += `
                        <p style="color: #666; margin-top: 15px;">
                            –ê–Ω–∞–ª—ñ–∑ –¥–æ–ø–æ–º–æ–≥–∏ –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–Ω—ñ –ø–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å placeholder —Ç–µ–∫—Å—Ç—ñ–≤, 
                            autocomplete –∞—Ç—Ä–∏–±—É—Ç—ñ–≤, aria-label —Ç–∞ —ñ–Ω—à–∏—Ö –ø—ñ–¥–∫–∞–∑–æ–∫ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.
                        </p>
                    `;
                }
                
                return html;
            }
            
            // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –ø–æ–º–∏–ª–æ–∫ –∑ –Ω–æ–≤–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é —Ñ–∞–∑
            function generateErrorSupportDetails(details) {
                if (!details) return '<p>–î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</p>';
                
                let html = `
                    <div class="score-explanation">
                        <strong>${details.score_explanation}</strong>
                    </div>
                `;
                
                if (details.total_forms > 0) {
                    html += `
                        <div style="margin-top: 15px;">
                            <p><strong>–í—Å—å–æ–≥–æ —Ñ–æ—Ä–º:</strong> ${details.total_forms}</p>
                            <p><strong>–ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏—Ö —Ñ–æ—Ä–º:</strong> ${details.supported_forms || 0}</p>
                            <p><strong>–¢–∏–ø –∞–Ω–∞–ª—ñ–∑—É:</strong> ${details.analysis_type === 'hybrid' ? 'üîÑ –ì—ñ–±—Ä–∏–¥–Ω–∏–π (—Å—Ç–∞—Ç–∏—á–Ω–∏–π + –¥–∏–Ω–∞–º—ñ—á–Ω–∏–π)' : 
                                                              details.analysis_type === 'static_only' ? 'üìä –¢—ñ–ª—å–∫–∏ —Å—Ç–∞—Ç–∏—á–Ω–∏–π' : 
                                                              '‚ùì –ù–µ–≤—ñ–¥–æ–º–∏–π'}</p>
                            ${details.dynamic_tests_count ? `<p><strong>–î–∏–Ω–∞–º—ñ—á–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤:</strong> ${details.dynamic_tests_count}</p>` : ''}
                        </div>
                    `;
                    
                    // –§–æ—Ä–º–∏ –∑ —Ö–æ—Ä–æ—à–æ—é –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é
                    if (details.supported_forms_list && details.supported_forms_list.length > 0) {
                        html += `
                            <h4 style="color: #27ae60; margin-top: 20px;">‚úÖ –§–æ—Ä–º–∏ –∑ —Ö–æ—Ä–æ—à–æ—é –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –ø–æ–º–∏–ª–æ–∫ (${details.supported_forms_list.length}):</h4>
                        `;
                        
                        details.supported_forms_list.forEach((form, index) => {
                            const qualityScore = (typeof form.quality_score === 'number' && !isNaN(form.quality_score)) 
                                ? (form.quality_score * 100).toFixed(1) 
                                : '0.0';
                            
                            html += `
                                <div style="margin: 15px 0; padding: 15px; background: #e8f5e8; border-radius: 8px; border-left: 4px solid #27ae60;">
                                    <h5 style="margin: 0 0 10px 0; color: #27ae60;">üìã ${form.selector || 'form'}</h5>
                                    <p><strong>–ó–∞–≥–∞–ª—å–Ω–∞ —è–∫—ñ—Å—Ç—å:</strong> ${qualityScore}%</p>
                            `;
                            
                            // –ü–æ–∫–∞–∑—É—î–º–æ —Ä–æ–∑–±–∏–≤–∫—É —Å—Ç–∞—Ç–∏—á–Ω–∏–π/–¥–∏–Ω–∞–º—ñ—á–Ω–∏–π —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–æ
                            if (typeof form.static_quality === 'number' || typeof form.dynamic_quality === 'number') {
                                html += `<div style="margin: 8px 0; padding: 8px; background: #f8f9fa; border-radius: 4px;">`;
                                if (typeof form.static_quality === 'number') {
                                    html += `<span style="margin-right: 15px;">üìä –°—Ç–∞—Ç–∏—á–Ω–∏–π: ${(form.static_quality * 100).toFixed(1)}%</span>`;
                                }
                                if (typeof form.dynamic_quality === 'number') {
                                    html += `<span>üß™ –î–∏–Ω–∞–º—ñ—á–Ω–∏–π: ${(form.dynamic_quality * 100).toFixed(1)}%</span>`;
                                } else if (form.dynamic_error) {
                                    html += `<span style="color: #e74c3c;">‚ùå –î–∏–Ω–∞–º—ñ—á–Ω–∏–π: ${form.dynamic_error}</span>`;
                                }
                                html += `</div>`;
                            }
                            
                            html += `<p><strong>–§—É–Ω–∫—Ü—ñ—ó:</strong> ${form.features || '–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö'}</p>`;
                            
                            // –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–∏–Ω–∞–º—ñ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
                            if (form.dynamic_test_result && form.dynamic_test_result.systematic_analysis) {
                                // –ù–æ–≤–∏–π —Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
                                const testResult = form.dynamic_test_result;
                                
                                html += `
                                    <div style="margin: 10px 0; padding: 15px; background: #e8f4fd; border-radius: 6px; border: 1px solid #bee5eb;">
                                        <h6 style="margin: 0 0 10px 0; color: #0c5460;">üî¨ –°–∏—Å—Ç–µ–º–∞—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –ø–æ–º–∏–ª–æ–∫:</h6>
                                        
                                        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px; margin-bottom: 10px;">
                                            <div><strong>–ü–æ–ª—ñ–≤ –ø—Ä–æ—Ç–µ—Å—Ç–æ–≤–∞–Ω–æ:</strong> ${testResult.total_fields || 0}</div>
                                            <div><strong>–ü–æ–ª—ñ–≤ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é:</strong> ${testResult.supported_fields || 0}</div>
                                        </div>
                                        
                                        <h6 style="margin: 10px 0 5px 0; color: #0c5460;">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Ç–æ–¥—ñ–≤ –≤–∏—è–≤–ª–µ–Ω–Ω—è:</h6>
                                        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 8px; font-size: 0.9em;">
                                `;
                                
                                const detectionStats = testResult.detection_statistics || {};
                                const statLabels = {
                                    'html5_api': 'HTML5 API',
                                    'aria_support': 'ARIA –ø—ñ–¥—Ç—Ä–∏–º–∫–∞', 
                                    'dom_changes': 'DOM –∑–º—ñ–Ω–∏',
                                    'css_states': 'CSS —Å—Ç–∞–Ω–∏'
                                };
                                
                                Object.entries(statLabels).forEach(([key, label]) => {
                                    const count = detectionStats[key] || 0;
                                    const total = testResult.total_fields || 1;
                                    const percentage = ((count / total) * 100).toFixed(0);
                                    const color = count > 0 ? '#28a745' : '#6c757d';
                                    
                                    html += `
                                        <div style="color: ${color};">
                                            <strong>${label}:</strong> ${count}/${total} (${percentage}%)
                                        </div>
                                    `;
                                });
                                
                                html += `</div>`;
                                
                                // –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –ø–æ–ª—ñ–≤ (—Å–∫–æ—Ä–æ—á–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ UI)
                                const fieldResults = testResult.field_results || [];
                                if (fieldResults.length > 0) {
                                    html += `
                                        <h6 style="margin: 15px 0 8px 0; color: #0c5460;">üîç –ê–Ω–∞–ª—ñ–∑ –ø–æ–ª—ñ–≤ (${fieldResults.length}):</h6>
                                        <div style="max-height: 200px; overflow-y: auto;">
                                    `;
                                    
                                    fieldResults.forEach((field, index) => {
                                        const fieldName = field.selector || `field-${index + 1}`;
                                        const fieldType = field.type || 'unknown';
                                        const fieldQuality = (field.quality_score * 100).toFixed(0);
                                        const isSupported = field.overall_support;
                                        const statusIcon = isSupported ? '‚úÖ' : '‚ùå';
                                        
                                        html += `
                                            <div style="margin: 4px 0; padding: 6px; background: white; border-radius: 3px; font-size: 0.85em;">
                                                ${statusIcon} <strong>${fieldName}</strong> (${fieldType}): ${fieldQuality}%
                                            </div>
                                        `;
                                    });
                                    
                                    html += `</div>`;
                                }
                                
                                html += `</div>`;
                            } else if (form.dynamic_breakdown) {
                                // –°—Ç–∞—Ä–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∏–Ω–∞–º—ñ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
                                html += `
                                    <div style="margin: 10px 0; padding: 10px; background: #fff3cd; border-radius: 4px; border: 1px solid #ffeaa7;">
                                        <h6 style="margin: 0 0 8px 0; color: #856404;">üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–∏–Ω–∞–º—ñ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:</h6>
                                `;
                                
                                Object.entries(form.dynamic_breakdown).forEach(([category, data]) => {
                                    const score = (typeof data.score === 'number' && !isNaN(data.score)) ? (data.score * 100).toFixed(1) : '0.0';
                                    html += `
                                        <div style="margin: 4px 0; font-size: 0.9em;">
                                            <strong>${category}:</strong> ${score}% - ${data.description || '–ù–µ–º–∞—î –æ–ø–∏—Å—É'}
                                        </div>
                                    `;
                                });
                                
                                html += `</div>`;
                            }
                            
                            html += `
                            `;
                            
                            // –î–µ—Ç–∞–ª—ñ –ø–æ–ª—ñ–≤ –∑ —Ñ–∞–∑–æ–≤–∏–º –∞–Ω–∞–ª—ñ–∑–æ–º
                            if (form.field_details && form.field_details.length > 0) {
                                html += `<h6 style="margin: 15px 0 10px 0;">–ü–æ–ª—è (${form.field_details.length}):</h6>`;
                                
                                form.field_details.forEach(field => {
                                    const fieldQualityScore = (typeof field.quality_score === 'number' && !isNaN(field.quality_score)) 
                                        ? (field.quality_score * 100).toFixed(1) 
                                        : '0.0';
                                    
                                    html += `
                                        <div style="margin: 10px 0; padding: 12px; background: white; border-radius: 6px; border: 1px solid #ddd;">
                                            <h6 style="margin: 0 0 8px 0; color: #2c3e50;">üîç ${field.name || 'unnamed'} (${field.type || 'unknown'})</h6>
                                            <p style="margin: 5px 0;"><strong>–ó–∞–≥–∞–ª—å–Ω–∞ —è–∫—ñ—Å—Ç—å:</strong> ${fieldQualityScore}%</p>
                                    `;
                                    
                                    // –§–∞–∑–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑
                                    const features = field.features;
                                    if (features) {
                                        ['phase1', 'phase2', 'phase3'].forEach(phaseName => {
                                            const phase = features[phaseName];
                                            if (phase) {
                                                const phaseScore = (typeof phase.score === 'number' && !isNaN(phase.score)) 
                                                    ? (phase.score * 100).toFixed(1) 
                                                    : '0.0';
                                                const maxScore = (typeof phase.max_score === 'number' && !isNaN(phase.max_score)) 
                                                    ? (phase.max_score * 100).toFixed(1) 
                                                    : '0.0';
                                                
                                                html += `
                                                    <div style="margin: 8px 0; padding: 8px; background: #f8f9fa; border-radius: 4px;">
                                                        <h6 style="margin: 0 0 5px 0; color: #495057;">üìå ${phase.title || phaseName}</h6>
                                                        <p style="margin: 3px 0; font-size: 0.9em;"><strong>–°–∫–æ—Ä:</strong> ${phaseScore}%/${maxScore}%</p>
                                                        <p style="margin: 3px 0; font-size: 0.9em; color: #6c757d;">${phase.description || ''}</p>
                                                `;
                                                
                                                // –î–µ—Ç–∞–ª—ñ –∫–æ–∂–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
                                                if (phase.details && phase.details.length > 0) {
                                                    phase.details.forEach(detail => {
                                                        const statusIcon = {
                                                            'success': '‚úÖ',
                                                            'warning': '‚ö†Ô∏è',
                                                            'error': '‚ùå',
                                                            'missing': '‚ùå',
                                                            'info': '‚ÑπÔ∏è'
                                                        }[detail.status] || '‚ùì';
                                                        
                                                        const detailScore = (typeof detail.score === 'number' && !isNaN(detail.score)) 
                                                            ? (detail.score * 100).toFixed(1) 
                                                            : '0.0';
                                                        
                                                        html += `
                                                            <div style="margin: 5px 0; padding: 6px; background: white; border-radius: 3px; font-size: 0.85em;">
                                                                <strong>${statusIcon} ${detail.feature || 'Unknown'}:</strong> ${detailScore}%<br>
                                                                <span style="color: #6c757d;">${detail.description || ''}</span><br>
                                                        `;
                                                        
                                                        if (detail.explanation) {
                                                            html += `<span style="color: #007bff; font-style: italic;">üí° ${detail.explanation}</span><br>`;
                                                        }
                                                        
                                                        html += `</div>`;
                                                    });
                                                }
                                                
                                                html += `</div>`;
                                            }
                                        });
                                    }
                                    
                                    html += `</div>`;
                                });
                            }
                            
                            html += `</div>`;
                        });
                    }
                    
                    // –ü—Ä–æ–±–ª–µ–º–Ω—ñ —Ñ–æ—Ä–º–∏
                    if (details.problematic_forms && details.problematic_forms.length > 0) {
                        html += `
                            <h4 style="color: #e74c3c; margin-top: 20px;">‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ñ —Ñ–æ—Ä–º–∏ (${details.problematic_forms.length}):</h4>
                        `;
                        
                        details.problematic_forms.forEach((form, index) => {
                            const qualityScore = (typeof form.quality_score === 'number' && !isNaN(form.quality_score)) 
                                ? (form.quality_score * 100).toFixed(1) 
                                : '0.0';
                            
                            html += `
                                <div style="margin: 15px 0; padding: 15px; background: #ffeaea; border-radius: 8px; border-left: 4px solid #e74c3c;">
                                    <h5 style="margin: 0 0 10px 0; color: #e74c3c;">üìã ${form.selector || 'form'}</h5>
                                    <p><strong>–ó–∞–≥–∞–ª—å–Ω–∞ —è–∫—ñ—Å—Ç—å:</strong> ${qualityScore}%</p>
                            `;
                            
                            // –ü–æ–∫–∞–∑—É—î–º–æ —Ä–æ–∑–±–∏–≤–∫—É —Å—Ç–∞—Ç–∏—á–Ω–∏–π/–¥–∏–Ω–∞–º—ñ—á–Ω–∏–π –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö —Ñ–æ—Ä–º
                            if (typeof form.static_quality === 'number' || typeof form.dynamic_quality === 'number') {
                                html += `<div style="margin: 8px 0; padding: 8px; background: #fff5f5; border-radius: 4px;">`;
                                if (typeof form.static_quality === 'number') {
                                    html += `<span style="margin-right: 15px;">üìä –°—Ç–∞—Ç–∏—á–Ω–∏–π: ${(form.static_quality * 100).toFixed(1)}%</span>`;
                                }
                                if (typeof form.dynamic_quality === 'number') {
                                    html += `<span>üß™ –î–∏–Ω–∞–º—ñ—á–Ω–∏–π: ${(form.dynamic_quality * 100).toFixed(1)}%</span>`;
                                } else if (form.dynamic_error) {
                                    html += `<span style="color: #e74c3c;">‚ùå –î–∏–Ω–∞–º—ñ—á–Ω–∏–π: ${form.dynamic_error}</span>`;
                                }
                                html += `</div>`;
                            }
                            
                            html += `<p><strong>–ü—Ä–æ–±–ª–µ–º–∏:</strong> ${form.issue || '–ù–µ–≤—ñ–¥–æ–º—ñ –ø—Ä–æ–±–ª–µ–º–∏'}</p>`;
                            
                            // –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–∏–Ω–∞–º—ñ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö —Ñ–æ—Ä–º
                            if (form.dynamic_test_result && form.dynamic_test_result.systematic_analysis) {
                                // –ù–æ–≤–∏–π —Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö —Ñ–æ—Ä–º
                                const testResult = form.dynamic_test_result;
                                
                                html += `
                                    <div style="margin: 10px 0; padding: 15px; background: #f8d7da; border-radius: 6px; border: 1px solid #f5c6cb;">
                                        <h6 style="margin: 0 0 10px 0; color: #721c24;">üî¨ –°–∏—Å—Ç–µ–º–∞—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ (–ø—Ä–æ–±–ª–µ–º–Ω–∞ —Ñ–æ—Ä–º–∞):</h6>
                                        
                                        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px; margin-bottom: 10px;">
                                            <div><strong>–ü–æ–ª—ñ–≤ –ø—Ä–æ—Ç–µ—Å—Ç–æ–≤–∞–Ω–æ:</strong> ${testResult.total_fields || 0}</div>
                                            <div><strong>–ü–æ–ª—ñ–≤ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é:</strong> ${testResult.supported_fields || 0}</div>
                                        </div>
                                `;
                                
                                // –ö–æ—Ä–æ—Ç–∫–∏–π –æ–≥–ª—è–¥ –ø—Ä–æ–±–ª–µ–º
                                const detectionStats = testResult.detection_statistics || {};
                                const totalFields = testResult.total_fields || 1;
                                const issues = [];
                                
                                if (detectionStats.html5_api === 0) issues.push("–í—ñ–¥—Å—É—Ç–Ω—è HTML5 –≤–∞–ª—ñ–¥–∞—Ü—ñ—è");
                                if (detectionStats.aria_support === 0) issues.push("–í—ñ–¥—Å—É—Ç–Ω—è ARIA –ø—ñ–¥—Ç—Ä–∏–º–∫–∞");
                                if (detectionStats.dom_changes === 0) issues.push("–ù–µ–º–∞—î DOM –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å");
                                if (detectionStats.css_states === 0) issues.push("–ù–µ–º–∞—î CSS —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤");
                                
                                if (issues.length > 0) {
                                    html += `
                                        <div style="margin: 10px 0; padding: 8px; background: #f5c6cb; border-radius: 4px;">
                                            <strong>–û—Å–Ω–æ–≤–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏:</strong><br>
                                            ${issues.map(issue => `‚Ä¢ ${issue}`).join('<br>')}
                                        </div>
                                    `;
                                }
                                
                                html += `</div>`;
                            } else if (form.dynamic_breakdown) {
                                // –°—Ç–∞—Ä–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö —Ñ–æ—Ä–º
                                html += `
                                    <div style="margin: 10px 0; padding: 10px; background: #f8d7da; border-radius: 4px; border: 1px solid #f5c6cb;">
                                        <h6 style="margin: 0 0 8px 0; color: #721c24;">üß™ –î–∏–Ω–∞–º—ñ—á–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:</h6>
                                `;
                                
                                Object.entries(form.dynamic_breakdown).forEach(([category, data]) => {
                                    const score = (typeof data.score === 'number' && !isNaN(data.score)) ? (data.score * 100).toFixed(1) : '0.0';
                                    html += `
                                        <div style="margin: 4px 0; font-size: 0.9em;">
                                            <strong>${category}:</strong> ${score}% - ${data.description || '–ù–µ–º–∞—î –æ–ø–∏—Å—É'}
                                        </div>
                                    `;
                                });
                                
                                html += `</div>`;
                            }
                            
                            html += `
                            `;
                            
                            // –î–µ—Ç–∞–ª—ñ –ø–æ–ª—ñ–≤ –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö —Ñ–æ—Ä–º (—Å–∫–æ—Ä–æ—á–µ–Ω–æ)
                            if (form.field_details && form.field_details.length > 0) {
                                html += `<h6 style="margin: 15px 0 10px 0;">–ü–æ–ª—è (${form.field_details.length}):</h6>`;
                                
                                form.field_details.forEach(field => {
                                    const fieldQualityScore = (typeof field.quality_score === 'number' && !isNaN(field.quality_score)) 
                                        ? (field.quality_score * 100).toFixed(1) 
                                        : '0.0';
                                    
                                    html += `
                                        <div style="margin: 10px 0; padding: 12px; background: white; border-radius: 6px; border: 1px solid #ddd;">
                                            <h6 style="margin: 0 0 8px 0; color: #2c3e50;">üîç ${field.name || 'unnamed'} (${field.type || 'unknown'})</h6>
                                            <p style="margin: 5px 0;"><strong>–Ø–∫—ñ—Å—Ç—å:</strong> ${fieldQualityScore}%</p>
                                    `;
                                    
                                    // –°–∫–æ—Ä–æ—á–µ–Ω–∏–π —Ñ–∞–∑–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑ –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö —Ñ–æ—Ä–º
                                    const features = field.features;
                                    if (features) {
                                        ['phase1', 'phase2', 'phase3'].forEach(phaseName => {
                                            const phase = features[phaseName];
                                            if (phase) {
                                                const phaseScore = (typeof phase.score === 'number' && !isNaN(phase.score)) 
                                                    ? (phase.score * 100).toFixed(1) 
                                                    : '0.0';
                                                
                                                const statusColor = phase.score > 0.7 ? '#27ae60' : phase.score > 0.3 ? '#f39c12' : '#e74c3c';
                                                
                                                html += `
                                                    <span style="display: inline-block; margin: 2px 5px 2px 0; padding: 3px 8px; background: ${statusColor}; color: white; border-radius: 12px; font-size: 0.8em;">
                                                        ${phase.title}: ${phaseScore}%
                                                    </span>
                                                `;
                                            }
                                        });
                                    }
                                    
                                    html += `</div>`;
                                });
                            }
                            
                            html += `</div>`;
                        });
                    }
                    
                } else {
                    html += `
                        <p style="color: #666; margin-top: 15px;">
                            –§–æ—Ä–º–∏ –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ. –ê–Ω–∞–ª—ñ–∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –ø–æ–º–∏–ª–æ–∫ –≤–∫–ª—é—á–∞—î 
                            –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ñ–æ—Ä–º, –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏ —Ç–∞ –º–µ—Ö–∞–Ω—ñ–∑–º—ñ–≤ —ó—Ö –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è.
                        </p>
                    `;
                }
                
                // –î–æ–¥–∞—î–º–æ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –∫—Ä–∏—Ç–µ—Ä—ñ—ó–≤ –æ—Ü—ñ–Ω–∫–∏
                html += `
                    <div style="margin-top: 20px; padding: 15px; background: #f8f9fa; border-radius: 5px; border: 1px solid #dee2e6;">
                        <h5 style="margin-top: 0; color: #495057;">üìã –ö—Ä–∏—Ç–µ—Ä—ñ—ó –æ—Ü—ñ–Ω–∫–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –ø–æ–º–∏–ª–æ–∫:</h5>
                        <ul style="margin: 10px 0; padding-left: 20px; color: #6c757d;">
                            <li><strong>–§–∞–∑–∞ 1 (40%):</strong> –ë–∞–∑–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó - required/pattern –≤–∞–ª—ñ–¥–∞—Ü—ñ—è, aria-invalid, aria-describedby, role="alert"</li>
                            <li><strong>–§–∞–∑–∞ 2 (30%):</strong> –Ø–∫—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å - –∑—Ä–æ–∑—É–º—ñ–ª—ñ—Å—Ç—å, –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å, —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ—Å—Ç—å</li>
                            <li><strong>–§–∞–∑–∞ 3 (30%):</strong> –î–∏–Ω–∞–º—ñ—á–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è - live regions, JavaScript –≤–∞–ª—ñ–¥–∞—Ü—ñ—è</li>
                        </ul>
                        <p style="margin: 5px 0; color: #495057;"><strong>–ü–æ—Ä—ñ–≥ —è–∫–æ—Å—Ç—ñ:</strong> ‚â•50% –≤–≤–∞–∂–∞—î—Ç—å—Å—è —Ö–æ—Ä–æ—à–æ—é –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –ø–æ–º–∏–ª–æ–∫</p>
                    </div>
                `;
                
                return html;
            }
            
            
            // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó
            function generateLocalizationDetails(details) {
                if (!details) return '<p>–î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</p>';
                
                let html = `
                    <div class="score-explanation">
                        <strong>${details.score_explanation}</strong>
                    </div>
                `;
                
                if (details.detected_languages && details.detected_languages.length > 0) {
                    html += `
                        <h4 style="color: #27ae60; margin-top: 20px;">‚úÖ –í–∏—è–≤–ª–µ–Ω—ñ –º–æ–≤–∏:</h4>
                        <div class="element-list">
                    `;
                    
                    details.detected_languages.forEach(lang => {
                        html += `
                            <div class="element-item correct">
                                <div class="element-status"><strong>–ú–æ–≤–∞:</strong> ${lang.name} (${lang.code})</div>
                                <div class="element-status"><strong>–í–∞–≥–∞ –≤ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É:</strong> ${(lang.weight * 100).toFixed(1)}%</div>
                            </div>
                        `;
                    });
                    
                    html += '</div>';
                }
                
                if (details.missing_languages && details.missing_languages.length > 0) {
                    html += `
                        <h4 style="color: #f39c12; margin-top: 20px;">‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –º–æ–≤–∏:</h4>
                        <div class="element-list">
                    `;
                    
                    details.missing_languages.forEach(lang => {
                        html += `
                            <div class="element-item" style="border-left: 4px solid #f39c12; background: #fff8e1;">
                                <div class="element-status"><strong>–ú–æ–≤–∞:</strong> ${lang.name} (${lang.code})</div>
                                <div class="element-status"><strong>–ü–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∞ –≤–∞–≥–∞:</strong> ${(lang.weight * 100).toFixed(1)}%</div>
                            </div>
                        `;
                    });
                    
                    html += '</div>';
                }
                
                if (!details.detected_languages || details.detected_languages.length === 0) {
                    html += `
                        <p style="color: #666; margin-top: 15px;">
                            –ê–Ω–∞–ª—ñ–∑ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó –ø–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å lang –∞—Ç—Ä–∏–±—É—Ç—ñ–≤, language switcher, 
                            hreflang –ø–æ—Å–∏–ª–∞–Ω—å —Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∑–Ω–∞—á–∞—î –º–æ–≤—É –∫–æ–Ω—Ç–µ–Ω—Ç—É.
                        </p>
                    `;
                }
                
                return html;
            }
            
            // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –µ–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è HTML
            function escapeHtml(text) {
                const div = document.createElement('div');
                div.textContent = text;
                return div.innerHTML;
            }
        </script>
    </body>
    </html>
    """
    
    return HTMLResponse(content=html_content)


@app.post("/api/evaluate", response_model=EvaluationResponse)
async def evaluate_accessibility(request: URLRequest):
    """
    –ê–Ω–∞–ª—ñ–∑ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –≤–µ–±—Å–∞–π—Ç—É
    
    Args:
        request: –ó–∞–ø–∏—Ç –∑ URL –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ
    """
    
    print(f"üîç –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ –∞–Ω–∞–ª—ñ–∑: {request.url}")
    
    try:
        # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∞–Ω–∞–ª—ñ–∑—É
        print(f"üìä –ü–æ—á–∞—Ç–æ–∫ –∞–Ω–∞–ª—ñ–∑—É –¥–ª—è {request.url}")
        result = await evaluator.evaluate_accessibility(str(request.url))
        
        if result['status'] == 'error':
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É: {result['error']}")
            raise HTTPException(status_code=400, detail=result['error'])
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ä—ñ–≤–Ω—è —è–∫–æ—Å—Ç—ñ
        try:
            from accessibility_evaluator.core.utils.calculator import ScoreCalculator
        except ImportError:
            from core.utils.calculator import ScoreCalculator
        calculator = ScoreCalculator(evaluator.weights, evaluator.metric_weights)
        
        quality_level = calculator.get_quality_level(result['final_score'])
        quality_description = calculator.get_quality_description(result['final_score'])
        
        print(f"‚úÖ –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –°–∫–æ—Ä: {result['final_score']:.3f}")
        
        return EvaluationResponse(
            url=result['url'],
            metrics=result['metrics'],
            subscores=result['subscores'],
            final_score=result['final_score'],
            quality_level=quality_level,
            quality_description=quality_description,
            recommendations=result['recommendations'],
            detailed_analysis=result.get('detailed_analysis', {}),  # –î–æ–¥–∞—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
            status=result['status']
        )
        
    except HTTPException:
        # –ü–µ—Ä–µ–ø–µ—Ä–µ–¥–∞—î–º–æ HTTP –ø–æ–º–∏–ª–∫–∏ —è–∫ —î
        raise
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=f"–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")


@app.post("/api/evaluate-html", response_model=EvaluationResponse)
async def evaluate_html_accessibility(request: HTMLRequest):
    """
    –ê–Ω–∞–ª—ñ–∑ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ HTML –∫–æ–Ω—Ç–µ–Ω—Ç—É
    
    Args:
        request: –ó–∞–ø–∏—Ç –∑ HTML –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ
    """
    
    print(f"üîç –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ –∞–Ω–∞–ª—ñ–∑ HTML –∫–æ–Ω—Ç–µ–Ω—Ç—É (–¥–æ–≤–∂–∏–Ω–∞: {len(request.html_content)} —Å–∏–º–≤–æ–ª—ñ–≤)")
    
    try:
        # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∞–Ω–∞–ª—ñ–∑—É HTML
        print(f"üìä –ü–æ—á–∞—Ç–æ–∫ –∞–Ω–∞–ª—ñ–∑—É HTML –∫–æ–Ω—Ç–µ–Ω—Ç—É")
        result = await evaluator.evaluate_html_content(
            html_content=request.html_content,
            base_url=request.base_url,
            title=request.title
        )
        
        if result['status'] == 'error':
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É: {result['error']}")
            raise HTTPException(status_code=400, detail=result['error'])
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ä—ñ–≤–Ω—è —è–∫–æ—Å—Ç—ñ
        try:
            from accessibility_evaluator.core.utils.calculator import ScoreCalculator
        except ImportError:
            from core.utils.calculator import ScoreCalculator
        calculator = ScoreCalculator(evaluator.weights, evaluator.metric_weights)
        
        quality_level = calculator.get_quality_level(result['final_score'])
        quality_description = calculator.get_quality_description(result['final_score'])
        
        print(f"‚úÖ –ê–Ω–∞–ª—ñ–∑ HTML –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –°–∫–æ—Ä: {result['final_score']:.3f}")
        
        return EvaluationResponse(
            url=result['url'],
            metrics=result['metrics'],
            subscores=result['subscores'],
            final_score=result['final_score'],
            quality_level=quality_level,
            quality_description=quality_description,
            recommendations=result['recommendations'],
            detailed_analysis=result.get('detailed_analysis', {}),  # –î–æ–¥–∞—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
            status=result['status']
        )
        
    except HTTPException:
        # –ü–µ—Ä–µ–ø–µ—Ä–µ–¥–∞—î–º–æ HTTP –ø–æ–º–∏–ª–∫–∏ —è–∫ —î
        raise
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ HTML: {str(e)}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=f"–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")


@app.get("/api/health")
async def health_check():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É —Å–µ—Ä–≤–µ—Ä–∞"""
    return {"status": "healthy", "message": "–°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î –Ω–æ—Ä–º–∞–ª—å–Ω–æ"}


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)