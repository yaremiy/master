"""
FastAPI –≤–µ–±-–¥–æ–¥–∞—Ç–æ–∫ –¥–ª—è –æ—Ü—ñ–Ω–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ
"""

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse
from pydantic import BaseModel, HttpUrl
from typing import Dict, Any
import asyncio
import os
import sys

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ core –º–æ–¥—É–ª—ñ–≤
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.join(current_dir, '..', '..')
sys.path.insert(0, project_root)

try:
    from accessibility_evaluator.core.evaluator import AccessibilityEvaluator
except ImportError:
    # Fallback –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É
    sys.path.insert(0, os.path.join(current_dir, '..', '..'))
    from core.evaluator import AccessibilityEvaluator

app = FastAPI(
    title="Accessibility Evaluator API",
    description="API –¥–ª—è –æ—Ü—ñ–Ω–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –≤–µ–±—Å–∞–π—Ç—ñ–≤ –∑–≥—ñ–¥–Ω–æ –∑ ISO 25023",
    version="1.0.0"
)

# CORS middleware –¥–ª—è frontend
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω—ñ –æ–±–º–µ–∂–∏—Ç–∏ –¥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö –¥–æ–º–µ–Ω—ñ–≤
    allow_credentials=True,
    allow_methods=["GET", "POST", "OPTIONS"],
    allow_headers=["*"],
)

# –î–æ–¥–∞—î–º–æ middleware –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤
@app.middleware("http")
async def log_requests(request, call_next):
    print(f"üì® {request.method} {request.url}")
    response = await call_next(request)
    print(f"üì§ –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response.status_code}")
    return response

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è evaluator
evaluator = AccessibilityEvaluator()


class URLRequest(BaseModel):
    """–ú–æ–¥–µ–ª—å –∑–∞–ø–∏—Ç—É –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É URL"""
    url: HttpUrl


class EvaluationResponse(BaseModel):
    """–ú–æ–¥–µ–ª—å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª—ñ–∑—É"""
    url: str
    metrics: Dict[str, float]
    subscores: Dict[str, float]
    final_score: float
    quality_level: str
    quality_description: str
    recommendations: list
    status: str


@app.get("/", response_class=HTMLResponse)
async def read_root():
    """–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∑ –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    
    html_content = """
    <!DOCTYPE html>
    <html lang="uk">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>–û—Ü—ñ–Ω–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –≤–µ–±—Å–∞–π—Ç—ñ–≤</title>
        <style>
            * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }
            
            body {
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                line-height: 1.6;
                color: #333;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
                padding: 20px;
            }
            
            .container {
                max-width: 1200px;
                margin: 0 auto;
                background: white;
                border-radius: 15px;
                box-shadow: 0 20px 40px rgba(0,0,0,0.1);
                overflow: hidden;
            }
            
            .header {
                background: linear-gradient(135deg, #2c3e50 0%, #3498db 100%);
                color: white;
                padding: 40px;
                text-align: center;
            }
            
            .header h1 {
                font-size: 2.5rem;
                margin-bottom: 10px;
                font-weight: 300;
            }
            
            .header p {
                font-size: 1.1rem;
                opacity: 0.9;
            }
            
            .main-content {
                padding: 40px;
            }
            
            .url-form {
                background: #f8f9fa;
                padding: 30px;
                border-radius: 10px;
                margin-bottom: 30px;
                border: 2px solid #e9ecef;
            }
            
            .form-group {
                margin-bottom: 20px;
            }
            
            label {
                display: block;
                margin-bottom: 8px;
                font-weight: 600;
                color: #2c3e50;
            }
            
            input[type="url"] {
                width: 100%;
                padding: 15px;
                border: 2px solid #ddd;
                border-radius: 8px;
                font-size: 16px;
                transition: border-color 0.3s;
            }
            
            input[type="url"]:focus {
                outline: none;
                border-color: #3498db;
                box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
            }
            
            .btn {
                background: linear-gradient(135deg, #3498db 0%, #2980b9 100%);
                color: white;
                padding: 15px 30px;
                border: none;
                border-radius: 8px;
                font-size: 16px;
                font-weight: 600;
                cursor: pointer;
                transition: transform 0.2s, box-shadow 0.2s;
                width: 100%;
            }
            
            .btn:hover {
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(52, 152, 219, 0.3);
            }
            
            .btn:disabled {
                opacity: 0.6;
                cursor: not-allowed;
                transform: none;
            }
            
            .loading {
                display: none;
                text-align: center;
                padding: 20px;
            }
            
            .spinner {
                border: 4px solid #f3f3f3;
                border-top: 4px solid #3498db;
                border-radius: 50%;
                width: 40px;
                height: 40px;
                animation: spin 1s linear infinite;
                margin: 0 auto 10px;
            }
            
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
            
            .results {
                display: none;
                margin-top: 30px;
            }
            
            .score-card {
                background: linear-gradient(135deg, #27ae60 0%, #2ecc71 100%);
                color: white;
                padding: 30px;
                border-radius: 10px;
                text-align: center;
                margin-bottom: 30px;
            }
            
            .score-value {
                font-size: 3rem;
                font-weight: bold;
                margin-bottom: 10px;
            }
            
            .score-level {
                font-size: 1.2rem;
                margin-bottom: 5px;
            }
            
            .score-description {
                opacity: 0.9;
            }
            
            .metrics-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                gap: 20px;
                margin-bottom: 30px;
            }
            
            .metric-card {
                background: white;
                border: 2px solid #e9ecef;
                border-radius: 10px;
                padding: 20px;
                text-align: center;
                transition: transform 0.2s;
            }
            
            .metric-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 10px 25px rgba(0,0,0,0.1);
            }
            
            .metric-name {
                font-weight: 600;
                color: #2c3e50;
                margin-bottom: 10px;
            }
            
            .metric-value {
                font-size: 2rem;
                font-weight: bold;
                color: #3498db;
            }
            
            .recommendations {
                background: #fff3cd;
                border: 2px solid #ffeaa7;
                border-radius: 10px;
                padding: 20px;
            }
            
            .recommendations h3 {
                color: #856404;
                margin-bottom: 15px;
            }
            
            .detailed-metrics {
                margin: 30px 0;
            }
            
            .metric-section {
                background: white;
                border: 2px solid #e9ecef;
                border-radius: 10px;
                padding: 20px;
                margin-bottom: 20px;
                box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            }
            
            .metric-section-title {
                color: #2c3e50;
                margin-bottom: 15px;
                font-size: 1.2rem;
                border-bottom: 2px solid #ecf0f1;
                padding-bottom: 10px;
            }
            
            .metric-details {
                display: flex;
                flex-direction: column;
                gap: 15px;
            }
            
            .metric-detail-item {
                display: flex;
                align-items: center;
                gap: 15px;
                padding: 10px;
                background: #f8f9fa;
                border-radius: 8px;
            }
            
            .metric-detail-name {
                flex: 1;
                font-weight: 600;
                color: #2c3e50;
            }
            
            .metric-detail-value {
                font-weight: bold;
                color: #3498db;
                min-width: 60px;
                text-align: right;
            }
            
            .metric-detail-bar {
                flex: 2;
                height: 20px;
                background: #ecf0f1;
                border-radius: 10px;
                overflow: hidden;
                position: relative;
            }
            
            .metric-detail-fill {
                height: 100%;
                border-radius: 10px;
                transition: width 0.5s ease;
                position: relative;
            }
            
            .metric-detail-fill::after {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: linear-gradient(90deg, transparent 0%, rgba(255,255,255,0.3) 50%, transparent 100%);
                animation: shimmer 2s infinite;
            }
            
            @keyframes shimmer {
                0% { transform: translateX(-100%); }
                100% { transform: translateX(100%); }
            }
            
            .recommendation-item {
                background: white;
                border-left: 4px solid #f39c12;
                padding: 15px;
                margin-bottom: 10px;
                border-radius: 5px;
            }
            
            .recommendation-category {
                font-weight: 600;
                color: #e67e22;
                font-size: 0.9rem;
            }
            
            .recommendation-text {
                margin-top: 5px;
                color: #2c3e50;
            }
            
            .error {
                background: #f8d7da;
                border: 2px solid #f5c6cb;
                color: #721c24;
                padding: 20px;
                border-radius: 10px;
                margin-top: 20px;
            }
            
            @media (max-width: 768px) {
                .header h1 {
                    font-size: 2rem;
                }
                
                .main-content {
                    padding: 20px;
                }
                
                .metrics-grid {
                    grid-template-columns: 1fr;
                }
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>–û—Ü—ñ–Ω–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –≤–µ–±—Å–∞–π—Ç—ñ–≤</h1>
                <p>–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –≤–µ–±—Ä–µ—Å—É—Ä—Å—ñ–≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ ISO 25023 —Ç–∞ WCAG</p>
            </div>
            
            <div class="main-content">
                <form class="url-form" id="evaluationForm">
                    <div class="form-group">
                        <label for="url">URL –∞–¥—Ä–µ—Å–∞ –≤–µ–±—Å–∞–π—Ç—É –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É:</label>
                        <input 
                            type="url" 
                            id="url" 
                            name="url" 
                            placeholder="https://example.com" 
                            required
                            aria-describedby="url-help"
                        >
                        <small id="url-help" style="color: #666; margin-top: 5px; display: block;">
                            –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—É URL –∞–¥—Ä–µ—Å—É –≤–∫–ª—é—á–Ω–æ –∑ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º (http:// –∞–±–æ https://)
                        </small>
                    </div>
                    
                    <button type="submit" class="btn" id="analyzeBtn">
                        –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å
                    </button>
                </form>
                
                <div class="loading" id="loading">
                    <div class="spinner"></div>
                    <p>–ê–Ω–∞–ª—ñ–∑—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –≤–µ–±—Å–∞–π—Ç—É...</p>
                    <p style="font-size: 0.9rem; color: #666; margin-top: 10px;">
                        –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω
                    </p>
                </div>
                
                <div class="results" id="results">
                    <!-- –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –±—É–¥—É—Ç—å –≤—Å—Ç–∞–≤–ª–µ–Ω—ñ —Ç—É—Ç —á–µ—Ä–µ–∑ JavaScript -->
                </div>
            </div>
        </div>
        
        <script>
            // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è DOM
            document.addEventListener('DOMContentLoaded', function() {
                console.log('DOM –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ, –¥–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π');
                
                const form = document.getElementById('evaluationForm');
                const urlInput = document.getElementById('url');
                const loadingDiv = document.getElementById('loading');
                const resultsDiv = document.getElementById('results');
                const analyzeBtn = document.getElementById('analyzeBtn');
                
                if (!form) {
                    console.error('–§–æ—Ä–º–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!');
                    return;
                }
                
                form.addEventListener('submit', async function(e) {
                    console.log('–§–æ—Ä–º–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞');
                    e.preventDefault(); // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ–π –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ñ–æ—Ä–º–∏
                    e.stopPropagation();
                    
                    const url = urlInput.value.trim();
                    console.log('URL –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É:', url);
                    
                    if (!url) {
                        alert('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å URL –∞–¥—Ä–µ—Å—É');
                        return;
                    }
                    
                    // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                    loadingDiv.style.display = 'block';
                    resultsDiv.style.display = 'none';
                    analyzeBtn.disabled = true;
                    analyzeBtn.textContent = '–ê–Ω–∞–ª—ñ–∑—É—î–º–æ...';
                    
                    try {
                        console.log('–í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –¥–æ API...');
                        
                        const response = await fetch('/api/evaluate', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'Accept': 'application/json'
                            },
                            body: JSON.stringify({ url: url })
                        });
                        
                        console.log('–û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:', response.status);
                        
                        if (!response.ok) {
                            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                        }
                        
                        const data = await response.json();
                        console.log('–î–∞–Ω—ñ –æ—Ç—Ä–∏–º–∞–Ω–æ:', data);
                        
                        if (data.status === 'success') {
                            displayResults(data);
                        } else {
                            displayError(data.error || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
                        }
                        
                    } catch (error) {
                        console.error('–ü–æ–º–∏–ª–∫–∞:', error);
                        displayError('–ü–æ–º–∏–ª–∫–∞ –∑—î–¥–Ω–∞–Ω–Ω—è: ' + error.message);
                    } finally {
                        loadingDiv.style.display = 'none';
                        analyzeBtn.disabled = false;
                        analyzeBtn.textContent = '–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å';
                    }
                });
                
                // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏
                analyzeBtn.addEventListener('click', function(e) {
                    console.log('–ö–Ω–æ–ø–∫–∞ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∞');
                    // –§–æ—Ä–º–∞ –±—É–¥–µ –æ–±—Ä–æ–±–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ submit event
                });
            });
            
            function displayResults(data) {
                const resultsDiv = document.getElementById('results');
                
                // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É –¥–ª—è —Å–∫–æ—Ä—É
                const scoreColor = getScoreColor(data.final_score);
                
                resultsDiv.innerHTML = `
                    <div class="score-card" style="background: linear-gradient(135deg, ${scoreColor} 0%, ${scoreColor}dd 100%);">
                        <div class="score-value">${(data.final_score * 100).toFixed(1)}%</div>
                        <div class="score-level">${data.quality_level}</div>
                        <div class="score-description">${data.quality_description}</div>
                        <div style="margin-top: 15px; font-size: 0.9rem; opacity: 0.9;">
                            –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ: ${data.url}
                        </div>
                    </div>
                    
                    <div class="detailed-metrics">
                        <h3 style="margin-bottom: 20px; color: #2c3e50;">–î–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –ø–æ –º–µ—Ç—Ä–∏–∫–∞—Ö</h3>
                        
                        <!-- –ü–µ—Ä—Ü–µ–ø—Ç–∏–≤–Ω—ñ—Å—Ç—å -->
                        <div class="metric-section">
                            <h4 class="metric-section-title">
                                üîç –ü–µ—Ä—Ü–µ–ø—Ç–∏–≤–Ω—ñ—Å—Ç—å (${(data.subscores.perceptibility * 100).toFixed(1)}%)
                            </h4>
                            <div class="metric-details">
                                <div class="metric-detail-item">
                                    <span class="metric-detail-name">–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π —Ç–µ–∫—Å—Ç:</span>
                                    <span class="metric-detail-value">${(data.metrics.alt_text * 100).toFixed(1)}%</span>
                                    <div class="metric-detail-bar">
                                        <div class="metric-detail-fill" style="width: ${data.metrics.alt_text * 100}%; background: ${getScoreColor(data.metrics.alt_text)};"></div>
                                    </div>
                                </div>
                                <div class="metric-detail-item">
                                    <span class="metric-detail-name">–ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ñ—Å—Ç—å —Ç–µ–∫—Å—Ç—É:</span>
                                    <span class="metric-detail-value">${(data.metrics.contrast * 100).toFixed(1)}%</span>
                                    <div class="metric-detail-bar">
                                        <div class="metric-detail-fill" style="width: ${data.metrics.contrast * 100}%; background: ${getScoreColor(data.metrics.contrast)};"></div>
                                    </div>
                                </div>
                                <div class="metric-detail-item">
                                    <span class="metric-detail-name">–î–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –º–µ–¥—ñ–∞:</span>
                                    <span class="metric-detail-value">${(data.metrics.media_accessibility * 100).toFixed(1)}%</span>
                                    <div class="metric-detail-bar">
                                        <div class="metric-detail-fill" style="width: ${data.metrics.media_accessibility * 100}%; background: ${getScoreColor(data.metrics.media_accessibility)};"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- –ö–µ—Ä–æ–≤–∞–Ω—ñ—Å—Ç—å -->
                        <div class="metric-section">
                            <h4 class="metric-section-title">
                                ‚å®Ô∏è –ö–µ—Ä–æ–≤–∞–Ω—ñ—Å—Ç—å (${(data.subscores.operability * 100).toFixed(1)}%)
                            </h4>
                            <div class="metric-details">
                                <div class="metric-detail-item">
                                    <span class="metric-detail-name">–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–Ω–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è:</span>
                                    <span class="metric-detail-value">${(data.metrics.keyboard_navigation * 100).toFixed(1)}%</span>
                                    <div class="metric-detail-bar">
                                        <div class="metric-detail-fill" style="width: ${data.metrics.keyboard_navigation * 100}%; background: ${getScoreColor(data.metrics.keyboard_navigation)};"></div>
                                    </div>
                                </div>
                                <div class="metric-detail-item">
                                    <span class="metric-detail-name">–°—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è:</span>
                                    <span class="metric-detail-value">${(data.metrics.structured_navigation * 100).toFixed(1)}%</span>
                                    <div class="metric-detail-bar">
                                        <div class="metric-detail-fill" style="width: ${data.metrics.structured_navigation * 100}%; background: ${getScoreColor(data.metrics.structured_navigation)};"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- –ó—Ä–æ–∑—É–º—ñ–ª—ñ—Å—Ç—å -->
                        <div class="metric-section">
                            <h4 class="metric-section-title">
                                üí° –ó—Ä–æ–∑—É–º—ñ–ª—ñ—Å—Ç—å (${(data.subscores.understandability * 100).toFixed(1)}%)
                            </h4>
                            <div class="metric-details">
                                <div class="metric-detail-item">
                                    <span class="metric-detail-name">–ó—Ä–æ–∑—É–º—ñ–ª—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó:</span>
                                    <span class="metric-detail-value">${(data.metrics.instruction_clarity * 100).toFixed(1)}%</span>
                                    <div class="metric-detail-bar">
                                        <div class="metric-detail-fill" style="width: ${data.metrics.instruction_clarity * 100}%; background: ${getScoreColor(data.metrics.instruction_clarity)};"></div>
                                    </div>
                                </div>
                                <div class="metric-detail-item">
                                    <span class="metric-detail-name">–î–æ–ø–æ–º–æ–≥–∞ –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–Ω—ñ:</span>
                                    <span class="metric-detail-value">${(data.metrics.input_assistance * 100).toFixed(1)}%</span>
                                    <div class="metric-detail-bar">
                                        <div class="metric-detail-fill" style="width: ${data.metrics.input_assistance * 100}%; background: ${getScoreColor(data.metrics.input_assistance)};"></div>
                                    </div>
                                </div>
                                <div class="metric-detail-item">
                                    <span class="metric-detail-name">–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –ø–æ–º–∏–ª–æ–∫:</span>
                                    <span class="metric-detail-value">${(data.metrics.error_support * 100).toFixed(1)}%</span>
                                    <div class="metric-detail-bar">
                                        <div class="metric-detail-fill" style="width: ${data.metrics.error_support * 100}%; background: ${getScoreColor(data.metrics.error_support)};"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- –õ–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è -->
                        <div class="metric-section">
                            <h4 class="metric-section-title">
                                üåç –õ–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è (${(data.subscores.localization * 100).toFixed(1)}%)
                            </h4>
                            <div class="metric-details">
                                <div class="metric-detail-item">
                                    <span class="metric-detail-name">–ë–∞–≥–∞—Ç–æ–º–æ–≤–Ω—ñ—Å—Ç—å:</span>
                                    <span class="metric-detail-value">${(data.metrics.localization * 100).toFixed(1)}%</span>
                                    <div class="metric-detail-bar">
                                        <div class="metric-detail-fill" style="width: ${data.metrics.localization * 100}%; background: ${getScoreColor(data.metrics.localization)};"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    ${data.recommendations.length > 0 ? `
                        <div class="recommendations">
                            <h3>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è</h3>
                            ${data.recommendations.map(rec => `
                                <div class="recommendation-item">
                                    <div class="recommendation-category">${rec.category} - ${rec.priority} –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç</div>
                                    <div class="recommendation-text">${rec.recommendation}</div>
                                    <small style="color: #666;">WCAG: ${rec.wcag_reference}</small>
                                </div>
                            `).join('')}
                        </div>
                    ` : ''}
                `;
                
                resultsDiv.style.display = 'block';
            }
            
            function displayError(errorMessage) {
                const resultsDiv = document.getElementById('results');
                resultsDiv.innerHTML = `
                    <div class="error">
                        <h3>–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É</h3>
                        <p>${errorMessage}</p>
                        <p style="margin-top: 10px; font-size: 0.9rem;">
                            –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å URL –∞–¥—Ä–µ—Å–∏ —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.
                        </p>
                    </div>
                `;
                resultsDiv.style.display = 'block';
            }
            
            function getScoreColor(score) {
                if (score >= 0.618) return '#27ae60';  // –í—ñ–¥–º—ñ–Ω–Ω–æ - –∑–µ–ª–µ–Ω–∏–π
                if (score >= 0.382) return '#3498db';  // –î–æ–±—Ä–µ - —Å–∏–Ω—ñ–π
                if (score >= 0.236) return '#f39c12';  // –ó–∞–¥–æ–≤—ñ–ª—å–Ω–æ - –ø–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π
                if (score >= 0.146) return '#e74c3c';  // –ü–æ–≥–∞–Ω–æ - —á–µ—Ä–≤–æ–Ω–∏–π
                return '#95a5a6';  // –î—É–∂–µ –ø–æ–≥–∞–Ω–æ - —Å—ñ—Ä–∏–π
            }
        </script>
    </body>
    </html>
    """
    
    return HTMLResponse(content=html_content)


@app.post("/api/evaluate", response_model=EvaluationResponse)
async def evaluate_accessibility(request: URLRequest):
    """
    –ê–Ω–∞–ª—ñ–∑ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –≤–µ–±—Å–∞–π—Ç—É
    
    Args:
        request: –ó–∞–ø–∏—Ç –∑ URL –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ
    """
    
    print(f"üîç –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ –∞–Ω–∞–ª—ñ–∑: {request.url}")
    
    try:
        # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∞–Ω–∞–ª—ñ–∑—É
        print(f"üìä –ü–æ—á–∞—Ç–æ–∫ –∞–Ω–∞–ª—ñ–∑—É –¥–ª—è {request.url}")
        result = await evaluator.evaluate_accessibility(str(request.url))
        
        if result['status'] == 'error':
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É: {result['error']}")
            raise HTTPException(status_code=400, detail=result['error'])
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ä—ñ–≤–Ω—è —è–∫–æ—Å—Ç—ñ
        try:
            from accessibility_evaluator.core.utils.calculator import ScoreCalculator
        except ImportError:
            from core.utils.calculator import ScoreCalculator
        calculator = ScoreCalculator(evaluator.weights, evaluator.metric_weights)
        
        quality_level = calculator.get_quality_level(result['final_score'])
        quality_description = calculator.get_quality_description(result['final_score'])
        
        print(f"‚úÖ –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –°–∫–æ—Ä: {result['final_score']:.3f}")
        
        return EvaluationResponse(
            url=result['url'],
            metrics=result['metrics'],
            subscores=result['subscores'],
            final_score=result['final_score'],
            quality_level=quality_level,
            quality_description=quality_description,
            recommendations=result['recommendations'],
            status=result['status']
        )
        
    except HTTPException:
        # –ü–µ—Ä–µ–ø–µ—Ä–µ–¥–∞—î–º–æ HTTP –ø–æ–º–∏–ª–∫–∏ —è–∫ —î
        raise
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=f"–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")


@app.get("/api/health")
async def health_check():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É —Å–µ—Ä–≤–µ—Ä–∞"""
    return {"status": "healthy", "message": "–°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î –Ω–æ—Ä–º–∞–ª—å–Ω–æ"}


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)