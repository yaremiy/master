"""
–ì–æ–ª–æ–≤–Ω–∏–π –∫–ª–∞—Å –¥–ª—è –æ—Ü—ñ–Ω–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –≤–µ–±—Å–∞–π—Ç—ñ–≤
"""

from playwright.async_api import async_playwright
from typing import Dict, Any, List
import asyncio

from .metrics.perceptibility import PerceptibilityMetrics
from .metrics.operability import OperabilityMetrics  
from .metrics.understandability import UnderstandabilityMetrics
from .metrics.localization import LocalizationMetrics
from .utils.web_scraper import WebScraper
from .utils.calculator import ScoreCalculator


class AccessibilityEvaluator:
    """–ì–æ–ª–æ–≤–Ω–∏–π –∫–ª–∞—Å –¥–ª—è –æ—Ü—ñ–Ω–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –≤–µ–±—Å–∞–π—Ç—ñ–≤"""
    
    def __init__(self):
        self.weights = {
            'perceptibility': 0.3,
            'operability': 0.3, 
            'understandability': 0.4,
            'localization': 0.4
        }
        
        self.metric_weights = {
            'alt_text': 0.15,
            'contrast': 0.15,
            'media_accessibility': 0.15,
            'keyboard_navigation': 0.05,
            'structured_navigation': 0.05,
            'instruction_clarity': 0.1,
            'input_assistance': 0.1,
            'error_support': 0.1,
            'localization': 0.15
        }
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä—ñ–≤ –º–µ—Ç—Ä–∏–∫
        self.perceptibility = PerceptibilityMetrics()
        self.operability = OperabilityMetrics()
        self.understandability = UnderstandabilityMetrics()
        self.localization = LocalizationMetrics()
        
        self.web_scraper = WebScraper()
        self.calculator = ScoreCalculator(self.weights, self.metric_weights)
    
    async def evaluate_accessibility(self, url: str) -> Dict[str, Any]:
        """
        –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ü—ñ–Ω–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –≤–µ–±—Å–∞–π—Ç—É
        
        Args:
            url: URL –≤–µ–±—Å–∞–π—Ç—É –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
            
        Returns:
            –°–ª–æ–≤–Ω–∏–∫ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª—ñ–∑—É
        """
        try:
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –≤–µ–±—Å–∞–π—Ç—É
            page_data = await self.web_scraper.scrape_page(url)
            
            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤—Å—ñ—Ö –º–µ—Ç—Ä–∏–∫
            metrics = await self.calculate_all_metrics(page_data)
            
            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø—ñ–¥—Å–∫–æ—Ä—ñ–≤
            subscores = self.calculator.calculate_subscores(metrics)
            
            # –§—ñ–Ω–∞–ª—å–Ω–∏–π —Å–∫–æ—Ä
            final_score = self.calculator.calculate_final_score(subscores)
            
            # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
            recommendations = self.generate_recommendations(metrics)
            
            return {
                'url': url,
                'metrics': metrics,
                'subscores': subscores,
                'final_score': final_score,
                'recommendations': recommendations,
                'axe_results': page_data.get('axe_results', {}),  # –î–æ–¥–∞—î–º–æ axe_results
                'status': 'success'
            }
            
        except Exception as e:
            return {
                'url': url,
                'error': str(e),
                'status': 'error'
            }
    
    async def calculate_all_metrics(self, page_data: Dict[str, Any]) -> Dict[str, float]:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤—Å—ñ—Ö –º–µ—Ç—Ä–∏–∫ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ"""
        
        metrics = {}
        
        # –ü–µ—Ä—Ü–µ–ø—Ç–∏–≤–Ω—ñ—Å—Ç—å
        metrics.update(await self.perceptibility.calculate_metrics(page_data))
        
        # –ö–µ—Ä–æ–≤–∞–Ω—ñ—Å—Ç—å
        metrics.update(await self.operability.calculate_metrics(page_data))
        
        # –ó—Ä–æ–∑—É–º—ñ–ª—ñ—Å—Ç—å
        metrics.update(await self.understandability.calculate_metrics(page_data))
        
        # –õ–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è
        metrics.update(await self.localization.calculate_metrics(page_data))
        
        return metrics
    
    def generate_recommendations(self, metrics: Dict[str, float]) -> List[Dict[str, str]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –º–µ—Ç—Ä–∏–∫"""
        
        recommendations = []
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É
        if metrics.get('alt_text', 0) < 0.8:
            recommendations.append({
                'category': '–ü–µ—Ä—Ü–µ–ø—Ç–∏–≤–Ω—ñ—Å—Ç—å',
                'issue': '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É',
                'recommendation': '–î–æ–¥–∞–π—Ç–µ –∑–º—ñ—Å—Ç–æ–≤–Ω—ñ alt –∞—Ç—Ä–∏–±—É—Ç–∏ –¥–æ –≤—Å—ñ—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å',
                'priority': '–í–∏—Å–æ–∫–∏–π',
                'wcag_reference': 'WCAG 1.1.1'
            })
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç—É
        if metrics.get('contrast', 0) < 0.7:
            recommendations.append({
                'category': '–ü–µ—Ä—Ü–µ–ø—Ç–∏–≤–Ω—ñ—Å—Ç—å',
                'issue': '–ù–∏–∑—å–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç —Ç–µ–∫—Å—Ç—É',
                'recommendation': '–ü—ñ–¥–≤–∏—â—Ç–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç –¥–æ –º—ñ–Ω—ñ–º—É–º 4.5:1 –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É',
                'priority': '–í–∏—Å–æ–∫–∏–π',
                'wcag_reference': 'WCAG 1.4.3'
            })
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–Ω–æ—ó –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
        if metrics.get('keyboard_navigation', 0) < 0.9:
            recommendations.append({
                'category': '–ö–µ—Ä–æ–≤–∞–Ω—ñ—Å—Ç—å',
                'issue': '–ü—Ä–æ–±–ª–µ–º–∏ –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–Ω–æ—é –Ω–∞–≤—ñ–≥–∞—Ü—ñ—î—é',
                'recommendation': '–ó–∞–±–µ–∑–ø–µ—á—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –≤—Å—ñ—Ö —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —á–µ—Ä–µ–∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É',
                'priority': '–í–∏—Å–æ–∫–∏–π',
                'wcag_reference': 'WCAG 2.1.1'
            })
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –∑—Ä–æ–∑—É–º—ñ–ª–æ—Å—Ç—ñ
        if metrics.get('instruction_clarity', 0) < 0.7:
            recommendations.append({
                'category': '–ó—Ä–æ–∑—É–º—ñ–ª—ñ—Å—Ç—å',
                'issue': '–°–∫–ª–∞–¥–Ω—ñ –∞–±–æ –Ω–µ–∑—Ä–æ–∑—É–º—ñ–ª—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó',
                'recommendation': '–°–ø—Ä–æ—Å—Ç—ñ—Ç—å –º–æ–≤—É —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π —Ç–∞ –∑—Ä–æ–±—ñ—Ç—å —ó—Ö –±—ñ–ª—å—à –∑—Ä–æ–∑—É–º—ñ–ª–∏–º–∏',
                'priority': '–°–µ—Ä–µ–¥–Ω—ñ–π',
                'wcag_reference': 'WCAG 3.1.5'
            })
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó
        if metrics.get('localization', 0) < 0.6:
            recommendations.append({
                'category': '–õ–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è',
                'issue': '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –º–æ–≤',
                'recommendation': '–î–æ–¥–∞–π—Ç–µ –ø—ñ–¥—Ç—Ä–∏–º–∫—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó —Ç–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –º–æ–≤',
                'priority': '–°–µ—Ä–µ–¥–Ω—ñ–π',
                'wcag_reference': 'WCAG 3.1.2'
            })
        
        return recommendations
    
    async def evaluate_html_content(self, html_content: str, base_url: str = "http://localhost", title: str = "HTML Document") -> Dict[str, Any]:
        """
        –û—Ü—ñ–Ω–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ HTML –∫–æ–Ω—Ç–µ–Ω—Ç—É –±–µ–∑ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ URL
        
        Args:
            html_content: HTML –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
            base_url: –ë–∞–∑–æ–≤–∏–π URL –¥–ª—è –≤—ñ–¥–Ω–æ—Å–Ω–∏—Ö –ø–æ—Å–∏–ª–∞–Ω—å
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            
        Returns:
            –°–ª–æ–≤–Ω–∏–∫ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª—ñ–∑—É
        """
        try:
            # –°—Ç–≤–æ—Ä—é—î–º–æ page_data –∑ HTML –∫–æ–Ω—Ç–µ–Ω—Ç—É
            page_data = await self._create_page_data_from_html(html_content, base_url, title)
            
            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤—Å—ñ—Ö –º–µ—Ç—Ä–∏–∫
            metrics = await self.calculate_all_metrics(page_data)
            
            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø—ñ–¥—Å–∫–æ—Ä—ñ–≤
            subscores = self.calculator.calculate_subscores(metrics)
            
            # –§—ñ–Ω–∞–ª—å–Ω–∏–π —Å–∫–æ—Ä
            final_score = self.calculator.calculate_final_score(subscores)
            
            # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
            recommendations = self.generate_recommendations(metrics)
            
            return {
                'url': f"{base_url} (HTML –∫–æ–Ω—Ç–µ–Ω—Ç)",
                'metrics': metrics,
                'subscores': subscores,
                'final_score': final_score,
                'recommendations': recommendations,
                'status': 'success'
            }
            
        except Exception as e:
            return {
                'url': f"{base_url} (HTML –∫–æ–Ω—Ç–µ–Ω—Ç)",
                'error': str(e),
                'status': 'error'
            }
    
    async def _create_page_data_from_html(self, html_content: str, base_url: str, title: str) -> Dict[str, Any]:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è page_data –∑ HTML –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É"""
        
        from playwright.async_api import async_playwright
        
        async with async_playwright() as p:
            browser = await p.chromium.launch(headless=True)
            page = await browser.new_page()
            
            try:
                print(f"üìÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è HTML –∫–æ–Ω—Ç–µ–Ω—Ç—É...")
                
                # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ HTML –∫–æ–Ω—Ç–µ–Ω—Ç
                await page.set_content(html_content, wait_until="domcontentloaded")
                
                # –ó–±–∏—Ä–∞—î–º–æ –¥–∞–Ω—ñ –∞–Ω–∞–ª–æ–≥—ñ—á–Ω–æ –¥–æ web_scraper
                print("üîç –ó–±—ñ—Ä —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤...")
                interactive_elements = await self.web_scraper._get_interactive_elements(page)
                
                print("üìù –ó–±—ñ—Ä —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤...")
                text_elements = await self.web_scraper._get_text_elements(page)
                
                print("üé¨ –ó–±—ñ—Ä –º–µ–¥—ñ–∞ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤...")
                media_elements = await self.web_scraper._get_media_elements(page)
                
                print("üìã –ó–±—ñ—Ä —Ñ–æ—Ä–º...")
                form_elements = await self.web_scraper._get_form_elements(page)
                
                print("üé® –ó–±—ñ—Ä —Å—Ç–∏–ª—ñ–≤...")
                computed_styles = await self.web_scraper._get_computed_styles(page)
                
                print("üîç –ó–∞–ø—É—Å–∫ axe-core –∞–Ω–∞–ª—ñ–∑—É...")
                axe_results = await self.web_scraper._run_axe_core(page)
                
                page_data = {
                    'url': base_url,
                    'html_content': html_content,
                    'title': title,
                    'page_depth': 0,  # HTML –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –º–∞—î –≥–ª–∏–±–∏–Ω–∏
                    'interactive_elements': interactive_elements,
                    'text_elements': text_elements,
                    'media_elements': media_elements,
                    'form_elements': form_elements,
                    'computed_styles': computed_styles,
                    'axe_results': axe_results
                }
                
                print(f"‚úÖ –ó–±—ñ—Ä –¥–∞–Ω–∏—Ö –∑ HTML –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ó–Ω–∞–π–¥–µ–Ω–æ:")
                print(f"   üìù –¢–µ–∫—Å—Ç–æ–≤–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤: {len(text_elements)}")
                print(f"   üîó –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤: {len(interactive_elements)}")
                print(f"   üé¨ –ú–µ–¥—ñ–∞ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤: {len(media_elements)}")
                print(f"   üìã –§–æ—Ä–º: {len(form_elements)}")
                
                return page_data
                
            finally:
                await browser.close()