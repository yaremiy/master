"""
–ú–µ—Ç—Ä–∏–∫–∏ –ø–µ—Ä—Ü–µ–ø—Ç–∏–≤–Ω–æ—Å—Ç—ñ (UAC-1.1-G)
"""

from bs4 import BeautifulSoup
from typing import Dict, Any, List
import re


class PerceptibilityMetrics:
    """–ö–ª–∞—Å –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –º–µ—Ç—Ä–∏–∫ –ø–µ—Ä—Ü–µ–ø—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
    
    async def calculate_metrics(self, page_data: Dict[str, Any]) -> Dict[str, float]:
        """
        –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤—Å—ñ—Ö –º–µ—Ç—Ä–∏–∫ –ø–µ—Ä—Ü–µ–ø—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        
        Args:
            page_data: –î–∞–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –≤—ñ–¥ WebScraper
            
        Returns:
            –°–ª–æ–≤–Ω–∏–∫ –∑ –º–µ—Ç—Ä–∏–∫–∞–º–∏ –ø–µ—Ä—Ü–µ–ø—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        """
        
        return {
            'alt_text': self.calculate_alt_text_metric(page_data),
            'contrast': await self.calculate_contrast_metric(page_data),
            'media_accessibility': self.calculate_media_accessibility_metric(page_data)
        }
    
    def calculate_alt_text_metric(self, page_data: Dict[str, Any]) -> float:
        """
        –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–µ—Ç—Ä–∏–∫–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É (UAC-1.1.1-G) –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º axe-core
        
        –§–æ—Ä–º—É–ª–∞: X = A / B
        A = –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω—å –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º alt —Ç–µ–∫—Å—Ç–æ–º (–∑ axe-core passes)
        B = –∑–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω—å (passes + violations)
        """
        
        axe_results = page_data.get('axe_results', {})
        
        print(f"\nüîç === –î–ï–¢–ê–õ–¨–ù–ò–ô –ê–ù–ê–õ–Ü–ó ALT-TEXT –ú–ï–¢–†–ò–ö–ò ===")
        
        # –ó–≥—ñ–¥–Ω–æ –∑ axe-core –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—î—é, –æ—Å–Ω–æ–≤–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω—å:
        alt_related_rules = ['image-alt', 'input-image-alt', 'area-alt']
        
        total_images = 0
        correct_images = 0
        
        print(f"üìã –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –ø—Ä–∞–≤–∏–ª–∞: {alt_related_rules}")
        
        for rule_id in alt_related_rules:
            print(f"\nüîç –ü—Ä–∞–≤–∏–ª–æ: {rule_id}")
            
            # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (passes)
            passes = self._get_axe_rule_results(axe_results, 'passes', rule_id)
            if passes:
                passes_count = len(passes.get('nodes', []))
                correct_images += passes_count
                total_images += passes_count
                print(f"   ‚úÖ Passes: {passes_count} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤")
                
                # –ü–æ–∫–∞–∑—É—î–º–æ –¥–µ—Ç–∞–ª—ñ –ø–µ—Ä—à–∏—Ö –∫—ñ–ª—å–∫–æ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
                nodes = passes.get('nodes', [])[:3]  # –ü–µ—Ä—à—ñ 3 –µ–ª–µ–º–µ–Ω—Ç–∏
                for i, node in enumerate(nodes):
                    target = node.get('target', ['–Ω–µ–≤—ñ–¥–æ–º–æ'])
                    html = node.get('html', '–Ω–µ–º–∞—î HTML')[:100] + '...' if len(node.get('html', '')) > 100 else node.get('html', '–Ω–µ–º–∞—î HTML')
                    print(f"     {i+1}. Target: {target}")
                    print(f"        HTML: {html}")
            else:
                print(f"   ‚úÖ Passes: 0 –µ–ª–µ–º–µ–Ω—Ç—ñ–≤")
            
            # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –ø—Ä–æ–±–ª–µ–º–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (violations)
            violations = self._get_axe_rule_results(axe_results, 'violations', rule_id)
            if violations:
                violations_count = len(violations.get('nodes', []))
                total_images += violations_count
                print(f"   ‚ùå Violations: {violations_count} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤")
                print(f"   üìù –û–ø–∏—Å –ø—Ä–æ–±–ª–µ–º–∏: {violations.get('description', '–Ω–µ–º–∞—î –æ–ø–∏—Å—É')}")
                
                # –ü–æ–∫–∞–∑—É—î–º–æ –¥–µ—Ç–∞–ª—ñ –ø–µ—Ä—à–∏—Ö –∫—ñ–ª—å–∫–æ—Ö –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
                nodes = violations.get('nodes', [])[:3]  # –ü–µ—Ä—à—ñ 3 –µ–ª–µ–º–µ–Ω—Ç–∏
                for i, node in enumerate(nodes):
                    target = node.get('target', ['–Ω–µ–≤—ñ–¥–æ–º–æ'])
                    html = node.get('html', '–Ω–µ–º–∞—î HTML')[:100] + '...' if len(node.get('html', '')) > 100 else node.get('html', '–Ω–µ–º–∞—î HTML')
                    failure_summary = node.get('failureSummary', '–Ω–µ–º–∞—î –æ–ø–∏—Å—É –ø–æ–º–∏–ª–∫–∏')
                    print(f"     {i+1}. Target: {target}")
                    print(f"        HTML: {html}")
                    print(f"        –ü—Ä–æ–±–ª–µ–º–∞: {failure_summary}")
                # correct_images –ù–ï –∑–±—ñ–ª—å—à—É—î–º–æ –¥–ª—è violations
            else:
                print(f"   ‚ùå Violations: 0 –µ–ª–µ–º–µ–Ω—Ç—ñ–≤")
        
        print(f"\nüìä –ü–Ü–î–°–£–ú–û–ö ALT-TEXT:")
        print(f"   –ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å: {correct_images}")
        print(f"   –ó–∞–≥–∞–ª—å–Ω–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å: {total_images}")
        
        # –Ø–∫—â–æ –Ω–µ–º–∞—î –∑–æ–±—Ä–∞–∂–µ–Ω—å, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ 1.0
        if total_images == 0:
            print(f"   ‚ö†Ô∏è –ù–µ–º–∞—î –∑–æ–±—Ä–∞–∂–µ–Ω—å –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ 1.0")
            return 1.0
        
        # –§–æ—Ä–º—É–ª–∞: X = A / B
        score = correct_images / total_images
        print(f"   üéØ –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫: {correct_images} / {total_images} = {score:.3f}")
        print(f"=== –ö–Ü–ù–ï–¶–¨ ALT-TEXT –ê–ù–ê–õ–Ü–ó–£ ===\n")
        
        return score
    
    def _get_axe_rule_results(self, axe_results: Dict[str, Any], result_type: str, rule_id: str) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞ axe-core"""
        
        results = axe_results.get(result_type, [])
        for result in results:
            if result.get('id') == rule_id:
                return result
        return {}
    
    
    async def calculate_contrast_metric(self, page_data: Dict[str, Any]) -> float:
        """
        –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–µ—Ç—Ä–∏–∫–∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—ñ —Ç–µ–∫—Å—Ç—É (UAC-1.1.2-G) –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º axe-core
        
        –§–æ—Ä–º—É–ª–∞: X = A / B
        A = –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –∑ –¥–æ—Å—Ç–∞—Ç–Ω—ñ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–æ–º (–∑ axe-core passes)
        B = –∑–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ (passes + violations)
        """
        
        axe_results = page_data.get('axe_results', {})
        
        print(f"\nüé® === –î–ï–¢–ê–õ–¨–ù–ò–ô –ê–ù–ê–õ–Ü–ó –ö–û–ù–¢–†–ê–°–¢–£ ===")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª –∫–æ–Ω—Ç—Ä–∞—Å—Ç—É
        contrast_rules = ['color-contrast', 'color-contrast-enhanced']
        
        total_elements = 0
        correct_elements = 0
        
        print(f"üìã –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –ø—Ä–∞–≤–∏–ª–∞: {contrast_rules}")
        
        for rule_id in contrast_rules:
            print(f"\nüîç –ü—Ä–∞–≤–∏–ª–æ: {rule_id}")
            
            # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–æ–º (passes)
            passes = self._get_axe_rule_results(axe_results, 'passes', rule_id)
            if passes:
                passes_count = len(passes.get('nodes', []))
                correct_elements += passes_count
                total_elements += passes_count
                print(f"   ‚úÖ Passes: {passes_count} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤")
                
                # –ü–æ–∫–∞–∑—É—î–º–æ –¥–µ—Ç–∞–ª—ñ –ø–µ—Ä—à–∏—Ö –∫—ñ–ª—å–∫–æ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
                nodes = passes.get('nodes', [])[:2]  # –ü–µ—Ä—à—ñ 2 –µ–ª–µ–º–µ–Ω—Ç–∏
                for i, node in enumerate(nodes):
                    target = node.get('target', ['–Ω–µ–≤—ñ–¥–æ–º–æ'])
                    html = node.get('html', '–Ω–µ–º–∞—î HTML')[:80] + '...' if len(node.get('html', '')) > 80 else node.get('html', '–Ω–µ–º–∞—î HTML')
                    print(f"     {i+1}. Target: {target}")
                    print(f"        HTML: {html}")
            else:
                print(f"   ‚úÖ Passes: 0 –µ–ª–µ–º–µ–Ω—Ç—ñ–≤")
            
            # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏ –∑ –ø—Ä–æ–±–ª–µ–º–Ω–∏–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–æ–º (violations)
            violations = self._get_axe_rule_results(axe_results, 'violations', rule_id)
            if violations:
                violations_count = len(violations.get('nodes', []))
                total_elements += violations_count
                print(f"   ‚ùå Violations: {violations_count} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤")
                print(f"   üìù –û–ø–∏—Å –ø—Ä–æ–±–ª–µ–º–∏: {violations.get('description', '–Ω–µ–º–∞—î –æ–ø–∏—Å—É')}")
                
                # –ü–æ–∫–∞–∑—É—î–º–æ –¥–µ—Ç–∞–ª—ñ –ø–µ—Ä—à–∏—Ö –∫—ñ–ª—å–∫–æ—Ö –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
                nodes = violations.get('nodes', [])[:2]  # –ü–µ—Ä—à—ñ 2 –µ–ª–µ–º–µ–Ω—Ç–∏
                for i, node in enumerate(nodes):
                    target = node.get('target', ['–Ω–µ–≤—ñ–¥–æ–º–æ'])
                    html = node.get('html', '–Ω–µ–º–∞—î HTML')[:80] + '...' if len(node.get('html', '')) > 80 else node.get('html', '–Ω–µ–º–∞—î HTML')
                    failure_summary = node.get('failureSummary', '–Ω–µ–º–∞—î –æ–ø–∏—Å—É –ø–æ–º–∏–ª–∫–∏')
                    print(f"     {i+1}. Target: {target}")
                    print(f"        HTML: {html}")
                    print(f"        –ü—Ä–æ–±–ª–µ–º–∞: {failure_summary}")
                # correct_elements –ù–ï –∑–±—ñ–ª—å—à—É—î–º–æ –¥–ª—è violations
            else:
                print(f"   ‚ùå Violations: 0 –µ–ª–µ–º–µ–Ω—Ç—ñ–≤")
        
        print(f"\nüìä –ü–Ü–î–°–£–ú–û–ö –ö–û–ù–¢–†–ê–°–¢–£:")
        print(f"   –ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤: {correct_elements}")
        print(f"   –ó–∞–≥–∞–ª—å–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤: {total_elements}")
        
        # –Ø–∫—â–æ –Ω–µ–º–∞—î —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ 1.0
        if total_elements == 0:
            print(f"   ‚ö†Ô∏è –ù–µ–º–∞—î —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ 1.0")
            return 1.0
        
        score = correct_elements / total_elements
        print(f"   üéØ –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫: {correct_elements} / {total_elements} = {score:.3f}")
        print(f"=== –ö–Ü–ù–ï–¶–¨ –ê–ù–ê–õ–Ü–ó–£ –ö–û–ù–¢–†–ê–°–¢–£ ===\n")
        
        return score
    
    def calculate_media_accessibility_metric(self, page_data: Dict[str, Any]) -> float:
        """
        –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–µ—Ç—Ä–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –º–µ–¥—ñ–∞ (UAC-1.1.3-G)
        
        –§–æ—Ä–º—É–ª–∞: X = A / B
        A = –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–µ–æ —ñ–∑ —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏ –∞–±–æ –∞—É–¥—ñ–æ–æ–ø–∏—Å–∞–º–∏
        B = –∑–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–µ–æ
        """
        
        media_elements = page_data.get('media_elements', [])
        video_elements = [elem for elem in media_elements if elem['type'] == 'video']
        
        if not video_elements:
            return 1.0  # –ù–µ–º–∞—î –≤—ñ–¥–µ–æ = –Ω–µ–º–∞—î –ø—Ä–æ–±–ª–µ–º
        
        accessible_videos = 0
        
        for video in video_elements:
            has_accessibility = False
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—É–±—Ç–∏—Ç—Ä—ñ–≤
            tracks = video.get('tracks', [])
            for track in tracks:
                if track.get('kind') in ['subtitles', 'captions']:
                    has_accessibility = True
                    break
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞—É–¥—ñ–æ–æ–ø–∏—Å—ñ–≤
            if not has_accessibility:
                for track in tracks:
                    if track.get('kind') == 'descriptions':
                        has_accessibility = True
                        break
            
            if has_accessibility:
                accessible_videos += 1
        
        return accessible_videos / len(video_elements)