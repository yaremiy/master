"""
–ú–µ—Ç—Ä–∏–∫–∏ –∫–µ—Ä–æ–≤–∞–Ω–æ—Å—Ç—ñ (UAC-1.2-G)
"""

from bs4 import BeautifulSoup
from typing import Dict, Any, List
import re


class OperabilityMetrics:
    """–ö–ª–∞—Å –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –º–µ—Ç—Ä–∏–∫ –∫–µ—Ä–æ–≤–∞–Ω–æ—Å—Ç—ñ"""
    
    async def calculate_metrics(self, page_data: Dict[str, Any]) -> Dict[str, float]:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤—Å—ñ—Ö –º–µ—Ç—Ä–∏–∫ –∫–µ—Ä–æ–≤–∞–Ω–æ—Å—Ç—ñ"""
        
        return {
            'keyboard_navigation': await self.calculate_keyboard_navigation_metric(page_data),
            'structured_navigation': self.calculate_structured_navigation_metric(page_data)
        }
    
    async def calculate_keyboard_navigation_metric(self, page_data: Dict[str, Any]) -> float:
        """
        –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ (UAC-1.2.1-G) –∑ —Ä–µ–∞–ª—å–Ω–∏–º —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è–º —Ñ–æ–∫—É—Å—É
        
        –§–æ—Ä–º—É–ª–∞: X = A / B
        A = –∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤, –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
        B = –∑–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
        """
        
        print(f"\n‚å®Ô∏è === –î–ï–¢–ê–õ–¨–ù–ò–ô –ê–ù–ê–õ–Ü–ó –ö–õ–ê–í–Ü–ê–¢–£–†–ù–û–á –ù–ê–í–Ü–ì–ê–¶–Ü–á (–†–ï–ê–õ–¨–ù–ï –¢–ï–°–¢–£–í–ê–ù–ù–Ø) ===")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ–æ–∫—É—Å—É –∑ web_scraper
        focus_test_results = page_data.get('focus_test_results', [])
        
        if not focus_test_results:
            print("‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ–æ–∫—É—Å—É –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fallback")
            return await self._fallback_keyboard_analysis(page_data)
        
        total_elements = len(focus_test_results)
        focusable_elements = sum(1 for result in focus_test_results if result.get('focusable', False))
        
        print(f"üìã –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤: {total_elements}")
        print(f"‚úÖ –°–ø—Ä–∞–≤–¥—ñ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏: {focusable_elements}")
        print(f"‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏: {total_elements - focusable_elements}")
        print()
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –¥–µ—Ç–∞–ª—ñ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
        focusable_list = [r for r in focus_test_results if r.get('focusable', False)]
        if focusable_list:
            print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ (–ø–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 5):")
            for i, result in enumerate(focusable_list[:5]):
                print(f"   {i+1}. {result.get('tag', 'unknown')} - {result.get('selector', '–Ω–µ–≤—ñ–¥–æ–º–æ')}")
                print(f"      HTML: {result.get('html', '–Ω–µ–º–∞—î')[:80]}...")
                print(f"      –ü—Ä–∏—á–∏–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ: {result.get('focus_reason', '–ü—Ä–æ–π—à–æ–≤ —Ç–µ—Å—Ç —Ñ–æ–∫—É—Å—É')}")
                print()
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –¥–µ—Ç–∞–ª—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
        non_focusable_list = [r for r in focus_test_results if not r.get('focusable', False)]
        if non_focusable_list:
            print(f"‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ (–ø–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 5):")
            for i, result in enumerate(non_focusable_list[:5]):
                print(f"   {i+1}. {result.get('tag', 'unknown')} - {result.get('selector', '–Ω–µ–≤—ñ–¥–æ–º–æ')}")
                print(f"      HTML: {result.get('html', '–Ω–µ–º–∞—î')[:80]}...")
                print(f"      –ü—Ä–∏—á–∏–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ: {result.get('non_focus_reason', '–ù–µ –ø—Ä–æ–π—à–æ–≤ —Ç–µ—Å—Ç —Ñ–æ–∫—É—Å—É')}")
                print()
        
        if total_elements == 0:
            print("‚ö†Ô∏è –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ 1.0")
            score = 1.0
        else:
            score = focusable_elements / total_elements
            print(f"üéØ –§—ñ–Ω–∞–ª—å–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫: {focusable_elements} / {total_elements} = {score:.3f}")
        
        print(f"=== –ö–Ü–ù–ï–¶–¨ –ê–ù–ê–õ–Ü–ó–£ –ö–õ–ê–í–Ü–ê–¢–£–†–ù–û–á –ù–ê–í–Ü–ì–ê–¶–Ü–á ===\n")
        return score
    
    async def _fallback_keyboard_analysis(self, page_data: Dict[str, Any]) -> float:
        """Fallback –∞–Ω–∞–ª—ñ–∑ —è–∫—â–æ —Ä–µ–∞–ª—å–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ"""
        
        print("üîÑ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fallback –∞–Ω–∞–ª—ñ–∑...")
        interactive_elements = page_data.get('interactive_elements', [])
        
        if not interactive_elements:
            return 1.0
        
        accessible_count = 0
        for element in interactive_elements:
            if self._is_keyboard_accessible(element):
                accessible_count += 1
        
        score = accessible_count / len(interactive_elements)
        print(f"üìä Fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {accessible_count}/{len(interactive_elements)} = {score:.3f}")
        return score
    
    def _is_keyboard_accessible(self, element: Dict[str, Any]) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –µ–ª–µ–º–µ–Ω—Ç–∞ –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏"""
        
        # –ù–∞—Ç–∏–≤–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
        native_accessible = ['button', 'a', 'input', 'select', 'textarea']
        
        if element.get('tag') in native_accessible:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –Ω–µ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π tabindex
            tabindex = element.get('tabindex')
            if tabindex == '-1':
                return False
            return True
        
        # –ö–∞—Å—Ç–æ–º–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ ARIA —Ä–æ–ª—è–º–∏
        role = element.get('role')
        if role in ['button', 'link', 'menuitem', 'tab']:
            tabindex = element.get('tabindex')
            return tabindex is not None and tabindex != '-1'
        
        # –ï–ª–µ–º–µ–Ω—Ç–∏ –∑ tabindex
        tabindex = element.get('tabindex')
        if tabindex is not None and tabindex != '-1':
            return True
        
        return False
    
    def calculate_structured_navigation_metric(self, page_data: Dict[str, Any]) -> float:
        """
        –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–µ—Ç—Ä–∏–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–æ—ó –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó (UAC-1.2.2-G) –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º axe-core
        
        –§–æ—Ä–º—É–ª–∞: X = A / B
        A = –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ (–∑ axe-core passes)
        B = –∑–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ (passes + violations)
        """
        
        axe_results = page_data.get('axe_results', {})
        
        print(f"\nüìã === –î–ï–¢–ê–õ–¨–ù–ò–ô –ê–ù–ê–õ–Ü–ó –°–¢–†–£–ö–¢–£–†–ò –ó–ê–ì–û–õ–û–í–ö–Ü–í ===")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
        heading_rules = ['heading-order', 'page-has-heading-one', 'empty-heading']
        
        total_headings = 0
        correct_headings = 0
        
        print(f"üìã –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –ø—Ä–∞–≤–∏–ª–∞: {heading_rules}")
        
        for rule_id in heading_rules:
            print(f"\nüîç –ü—Ä–∞–≤–∏–ª–æ: {rule_id}")
            
            # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (passes)
            passes = self._get_axe_rule_results(axe_results, 'passes', rule_id)
            if passes:
                passes_count = len(passes.get('nodes', []))
                correct_headings += passes_count
                total_headings += passes_count
                print(f"   ‚úÖ Passes: {passes_count} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤")
                
                # –ü–æ–∫–∞–∑—É—î–º–æ –¥–µ—Ç–∞–ª—ñ –ø–µ—Ä—à–∏—Ö –∫—ñ–ª—å–∫–æ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
                nodes = passes.get('nodes', [])[:3]  # –ü–µ—Ä—à—ñ 3 –µ–ª–µ–º–µ–Ω—Ç–∏
                for i, node in enumerate(nodes):
                    target = node.get('target', ['–Ω–µ–≤—ñ–¥–æ–º–æ'])
                    html = node.get('html', '–Ω–µ–º–∞—î HTML')[:80] + '...' if len(node.get('html', '')) > 80 else node.get('html', '–Ω–µ–º–∞—î HTML')
                    print(f"     {i+1}. Target: {target}")
                    print(f"        HTML: {html}")
            else:
                print(f"   ‚úÖ Passes: 0 –µ–ª–µ–º–µ–Ω—Ç—ñ–≤")
            
            # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –ø—Ä–æ–±–ª–µ–º–Ω—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (violations)
            violations = self._get_axe_rule_results(axe_results, 'violations', rule_id)
            if violations:
                violations_count = len(violations.get('nodes', []))
                total_headings += violations_count
                print(f"   ‚ùå Violations: {violations_count} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤")
                print(f"   üìù –û–ø–∏—Å –ø—Ä–æ–±–ª–µ–º–∏: {violations.get('description', '–Ω–µ–º–∞—î –æ–ø–∏—Å—É')}")
                
                # –ü–æ–∫–∞–∑—É—î–º–æ –¥–µ—Ç–∞–ª—ñ –ø–µ—Ä—à–∏—Ö –∫—ñ–ª—å–∫–æ—Ö –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
                nodes = violations.get('nodes', [])[:3]  # –ü–µ—Ä—à—ñ 3 –µ–ª–µ–º–µ–Ω—Ç–∏
                for i, node in enumerate(nodes):
                    target = node.get('target', ['–Ω–µ–≤—ñ–¥–æ–º–æ'])
                    html = node.get('html', '–Ω–µ–º–∞—î HTML')[:80] + '...' if len(node.get('html', '')) > 80 else node.get('html', '–Ω–µ–º–∞—î HTML')
                    failure_summary = node.get('failureSummary', '–Ω–µ–º–∞—î –æ–ø–∏—Å—É –ø–æ–º–∏–ª–∫–∏')
                    print(f"     {i+1}. Target: {target}")
                    print(f"        HTML: {html}")
                    print(f"        –ü—Ä–æ–±–ª–µ–º–∞: {failure_summary}")
                # correct_headings –ù–ï –∑–±—ñ–ª—å—à—É—î–º–æ –¥–ª—è violations
            else:
                print(f"   ‚ùå Violations: 0 –µ–ª–µ–º–µ–Ω—Ç—ñ–≤")
        
        print(f"\nüìä –ü–Ü–î–°–£–ú–û–ö –°–¢–†–£–ö–¢–£–†–ò –ó–ê–ì–û–õ–û–í–ö–Ü–í:")
        print(f"   –ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤: {correct_headings}")
        print(f"   –ó–∞–≥–∞–ª—å–Ω–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤: {total_headings}")
        
        # –Ø–∫—â–æ –Ω–µ–º–∞—î –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ 1.0
        if total_headings == 0:
            print(f"   ‚ö†Ô∏è –ù–µ–º–∞—î –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ 1.0")
            return 1.0
        
        score = correct_headings / total_headings
        print(f"   üéØ –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫: {correct_headings} / {total_headings} = {score:.3f}")
        print(f"=== –ö–Ü–ù–ï–¶–¨ –ê–ù–ê–õ–Ü–ó–£ –ó–ê–ì–û–õ–û–í–ö–Ü–í ===\n")
        
        return score
    
    def _get_axe_rule_results(self, axe_results: Dict[str, Any], result_type: str, rule_id: str) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞ axe-core"""
        
        results = axe_results.get(result_type, [])
        for result in results:
            if result.get('id') == rule_id:
                return result
        return {}
    
