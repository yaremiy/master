/**
 * FormTester - —Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ–æ—Ä–º –Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫—É –ø–æ–º–∏–ª–æ–∫
 * –ü–æ—Ä—Ç–æ–≤–∞–Ω–∏–π –∑ Python –∫–æ–¥—É –∑ –ø–æ–≤–Ω–∏–º –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º –ª–æ–≥—ñ–∫–∏
 */

class FormTester {
    constructor() {
        this.helpers = window.AccessibilityHelpers;
        
        // –°–∏—Å—Ç–µ–º–∞—Ç–∏—á–Ω–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ —Ç–µ—Å—Ç–æ–≤–∏—Ö —Å—Ü–µ–Ω–∞—Ä—ñ—ó–≤
        this.invalidTestScenarios = {
            'email': [
                { value: '', type: 'empty', description: '–ü–æ—Ä–æ–∂–Ω—î –ø–æ–ª–µ' },
                { value: 'abc', type: 'invalid_format', description: '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç' },
                { value: 'test@', type: 'incomplete', description: '–ù–µ–ø–æ–≤–Ω–∏–π email' },
                { value: '@domain.com', type: 'missing_local', description: '–í—ñ–¥—Å—É—Ç–Ω—è –ª–æ–∫–∞–ª—å–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞' },
                { value: 'a'.repeat(255) + '@test.com', type: 'too_long', description: '–ó–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π' }
            ],
            'number': [
                { value: '', type: 'empty', description: '–ü–æ—Ä–æ–∂–Ω—î –ø–æ–ª–µ' },
                { value: 'abc', type: 'non_numeric', description: '–ù–µ —á–∏—Å–ª–æ' },
                { value: '12.34.56', type: 'invalid_format', description: '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç' },
                { value: '999999999999999999999', type: 'too_large', description: '–ó–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–µ —á–∏—Å–ª–æ' }
            ],
            'tel': [
                { value: '', type: 'empty', description: '–ü–æ—Ä–æ–∂–Ω—î –ø–æ–ª–µ' },
                { value: '123', type: 'too_short', description: '–ó–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π' },
                { value: 'abc-def-ghij', type: 'invalid_chars', description: '–ù–µ–≤—ñ—Ä–Ω—ñ —Å–∏–º–≤–æ–ª–∏' },
                { value: '1'.repeat(50), type: 'too_long', description: '–ó–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π' }
            ],
            'url': [
                { value: '', type: 'empty', description: '–ü–æ—Ä–æ–∂–Ω—î –ø–æ–ª–µ' },
                { value: 'not-url', type: 'invalid_format', description: '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç' },
                { value: 'http://', type: 'incomplete', description: '–ù–µ–ø–æ–≤–Ω–∏–π URL' },
                { value: 'ftp://invalid', type: 'unsupported_protocol', description: '–ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª' }
            ],
            'date': [
                { value: '', type: 'empty', description: '–ü–æ—Ä–æ–∂–Ω—î –ø–æ–ª–µ' },
                { value: '32/13/2023', type: 'invalid_date', description: '–ù–µ—ñ—Å–Ω—É—é—á–∞ –¥–∞—Ç–∞' },
                { value: 'not-date', type: 'invalid_format', description: '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç' },
                { value: '2023-13-45', type: 'invalid_values', description: '–ù–µ–≤—ñ—Ä–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è' }
            ],
            'time': [
                { value: '', type: 'empty', description: '–ü–æ—Ä–æ–∂–Ω—î –ø–æ–ª–µ' },
                { value: '25:99', type: 'invalid_time', description: '–ù–µ—ñ—Å–Ω—É—é—á–∏–π —á–∞—Å' },
                { value: 'not-time', type: 'invalid_format', description: '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç' }
            ],
            'password': [
                { value: '', type: 'empty', description: '–ü–æ—Ä–æ–∂–Ω—ñ–π –ø–∞—Ä–æ–ª—å' },
                { value: '123', type: 'too_short', description: '–ó–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π' },
                { value: '   ', type: 'whitespace_only', description: '–¢—ñ–ª—å–∫–∏ –ø—Ä–æ–±—ñ–ª–∏' }
            ],
            'text': [
                { value: '', type: 'empty', description: '–ü–æ—Ä–æ–∂–Ω—î –ø–æ–ª–µ' },
                { value: '   ', type: 'whitespace_only', description: '–¢—ñ–ª—å–∫–∏ –ø—Ä–æ–±—ñ–ª–∏' }
            ],
            'textarea': [
                { value: '', type: 'empty', description: '–ü–æ—Ä–æ–∂–Ω—î –ø–æ–ª–µ' },
                { value: '   ', type: 'whitespace_only', description: '–¢—ñ–ª—å–∫–∏ –ø—Ä–æ–±—ñ–ª–∏' }
            ]
        };
    }

    /**
     * –°–∏—Å—Ç–µ–º–∞—Ç–∏—á–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ–æ—Ä–º–∏ –∑–∞ –Ω–æ–≤–∏–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º:
     * 1. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–Ω–∞–ª—ñ–∑—É
     * 2. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ü–µ–Ω–∞—Ä—ñ—ó–≤ –≤–≤–µ–¥–µ–Ω–Ω—è  
     * 3. –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
     * 4. –ó–±—ñ—Ä —Å–∏–≥–Ω–∞–ª—ñ–≤ –ø—Ä–æ –ø–æ–º–∏–ª–∫—É (HTML5 API, ARIA, DOM, CSS)
     * 5. –ö—Ä–æ—Å-–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
     * 6. –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
     */
    async testFormErrorBehaviorSystematic(formSelector = 'form') {
        this.helpers.log(`üî¨ –°–∏—Å—Ç–µ–º–∞—Ç–∏—á–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ–æ—Ä–º–∏: ${formSelector}`);
        
        try {
            // 1. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–Ω–∞–ª—ñ–∑—É
            const form = document.querySelector(formSelector);
            if (!form) {
                return this.createSystematicResult("–§–æ—Ä–º–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞", formSelector);
            }
            
            // –í–∏–∑–Ω–∞—á–∏—Ç–∏ –≤—Å—ñ –ø–æ–ª—è —Ñ–æ—Ä–º–∏
            const fieldsData = this.discoverFormFields(form);
            if (!fieldsData || fieldsData.length === 0) {
                return this.createSystematicResult("–ü–æ–ª—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", formSelector);
            }
            
            this.helpers.log(`üìã –ó–Ω–∞–π–¥–µ–Ω–æ ${fieldsData.length} –ø–æ–ª—ñ–≤ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è`);
            
            // –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø–æ–ª—è
            const fieldTestResults = [];
            
            for (const fieldData of fieldsData) {
                this.helpers.log(`üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–æ–ª—è: ${fieldData.selector}`);
                
                // 2-6. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–æ–ª—è –∑–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º
                const fieldResult = await this.testFieldSystematic(fieldData);
                fieldTestResults.push(fieldResult);
            }
            
            // –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            return this.compileSystematicResults(formSelector, fieldTestResults);
            
        } catch (error) {
            this.helpers.log(`‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: ${error.message}`, 'error');
            return this.createSystematicResult(`–ü–æ–º–∏–ª–∫–∞: ${error.message}`, formSelector);
        }
    }

    /**
     * 1. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–Ω–∞–ª—ñ–∑—É - –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –≤—Å—ñ—Ö –ø–æ–ª—ñ–≤ —Ñ–æ—Ä–º–∏
     */
    discoverFormFields(form) {
        const fields = form.querySelectorAll('input, textarea, select');
        const fieldsData = [];
        
        fields.forEach((field, index) => {
            const fieldType = field.type || field.tagName.toLowerCase();
            const isTestable = (
                field.required ||
                field.pattern ||
                field.minLength > 0 ||
                (field.maxLength > 0 && field.maxLength < 524288) ||
                field.min !== '' ||
                field.max !== '' ||
                ['email', 'number', 'tel', 'url', 'date', 'time', 'datetime-local', 'password'].includes(fieldType)
            );
            
            if (isTestable) {
                fieldsData.push({
                    selector: field.id ? `#${field.id}` : 
                             field.name ? `[name="${field.name}"]` :
                             `${field.tagName.toLowerCase()}:nth-child(${index + 1})`,
                    type: fieldType,
                    required: field.required || false,
                    pattern: field.pattern || null,
                    minLength: field.minLength || null,
                    maxLength: field.maxLength || null,
                    min: field.min || null,
                    max: field.max || null,
                    step: field.step || null,
                    id: field.id || null,
                    name: field.name || null,
                    placeholder: field.placeholder || '',
                    element: field
                });
            }
        });
        
        return fieldsData;
    }

    /**
     * 2-6. –°–∏—Å—Ç–µ–º–∞—Ç–∏—á–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—è
     */
    async testFieldSystematic(fieldData) {
        const fieldSelector = fieldData.selector;
        const fieldType = fieldData.type;
        
        // 2. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ü–µ–Ω–∞—Ä—ñ—ó–≤ –≤–≤–µ–¥–µ–Ω–Ω—è
        const testScenarios = this.generateTestScenarios(fieldData);
        
        const fieldResult = {
            selector: fieldSelector,
            type: fieldType,
            field_data: fieldData,
            test_scenarios: [],
            error_detection_summary: {
                html5_api: false,
                aria_support: false,
                dom_changes: false,
                css_states: false
            },
            overall_support: false,
            quality_score: 0.0
        };
        
        // –¢–µ—Å—Ç—É—î–º–æ –∫–æ–∂–µ–Ω —Å—Ü–µ–Ω–∞—Ä—ñ–π
        for (const scenario of testScenarios) {
            this.helpers.log(`   üìù –°—Ü–µ–Ω–∞—Ä—ñ–π: ${scenario.description} -> '${scenario.value}'`);
            
            const scenarioResult = await this.testScenario(fieldData.element, scenario);
            fieldResult.test_scenarios.push(scenarioResult);
            
            // –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø—ñ–¥—Ç—Ä–∏–º–∫—É
            if (scenarioResult.error_detected) {
                fieldResult.error_detection_summary.html5_api |= scenarioResult.signals.html5_api.detected;
                fieldResult.error_detection_summary.aria_support |= scenarioResult.signals.aria_support.detected;
                fieldResult.error_detection_summary.dom_changes |= scenarioResult.signals.dom_changes.detected;
                fieldResult.error_detection_summary.css_states |= scenarioResult.signals.css_states.detected;
            }
        }
        
        // 5. –ö—Ä–æ—Å-–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
        fieldResult.overall_support = Object.values(fieldResult.error_detection_summary).some(Boolean);
        fieldResult.quality_score = this.calculateFieldQualityScore(fieldResult);
        
        return fieldResult;
    }

    /**
     * 2. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ü–µ–Ω–∞—Ä—ñ—ó–≤ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–ª—è –ø–æ–ª—è
     */
    generateTestScenarios(fieldData) {
        const fieldType = fieldData.type;
        let scenarios = [];
        
        // –ë–∞–∑–æ–≤—ñ —Å—Ü–µ–Ω–∞—Ä—ñ—ó –∑ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏
        if (this.invalidTestScenarios[fieldType]) {
            scenarios = [...this.invalidTestScenarios[fieldType]];
        } else {
            // –ó–∞–≥–∞–ª—å–Ω—ñ —Å—Ü–µ–Ω–∞—Ä—ñ—ó –¥–ª—è –Ω–µ–≤—ñ–¥–æ–º–∏—Ö —Ç–∏–ø—ñ–≤
            scenarios = [
                { value: '', type: 'empty', description: '–ü–æ—Ä–æ–∂–Ω—î –ø–æ–ª–µ' },
                { value: '   ', type: 'whitespace', description: '–¢—ñ–ª—å–∫–∏ –ø—Ä–æ–±—ñ–ª–∏' }
            ];
        }
        
        // –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Å—Ü–µ–Ω–∞—Ä—ñ—ó –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –∞—Ç—Ä–∏–±—É—Ç—ñ–≤ –ø–æ–ª—è
        scenarios = scenarios.filter(scenario => {
            // –ü–æ—Ä–æ–∂–Ω—î –ø–æ–ª–µ —Ç–µ—Å—Ç—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –¥–ª—è required
            if (scenario.type === 'empty' && !fieldData.required) {
                return false;
            }
            return true;
        });
        
        // –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Å—Ü–µ–Ω–∞—Ä—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∞—Ç—Ä–∏–±—É—Ç—ñ–≤
        if (fieldData.maxLength && fieldData.maxLength > 0) {
            scenarios.push({
                value: 'a'.repeat(fieldData.maxLength + 10),
                type: 'exceeds_maxlength',
                description: `–ü–µ—Ä–µ–≤–∏—â—É—î maxLength (${fieldData.maxLength})`
            });
        }
        
        if (fieldData.min && fieldType === 'number') {
            try {
                const minVal = parseFloat(fieldData.min);
                scenarios.push({
                    value: String(minVal - 1),
                    type: 'below_min',
                    description: `–ú–µ–Ω—à–µ –º—ñ–Ω—ñ–º—É–º—É (${fieldData.min})`
                });
            } catch (e) {
                // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥—É
            }
        }
        
        if (fieldData.max && fieldType === 'number') {
            try {
                const maxVal = parseFloat(fieldData.max);
                scenarios.push({
                    value: String(maxVal + 1),
                    type: 'above_max',
                    description: `–ë—ñ–ª—å—à–µ –º–∞–∫—Å–∏–º—É–º—É (${fieldData.max})`
                });
            } catch (e) {
                // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥—É
            }
        }
        
        return scenarios.slice(0, 3); // –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ü–µ–Ω–∞—Ä—ñ—ó–≤ –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ
    }

    /**
     * 3-4. –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–∞ –∑–±—ñ—Ä —Å–∏–≥–Ω–∞–ª—ñ–≤ –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
     */
    async testScenario(fieldElement, scenario) {
        try {
            // 3. –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è
            const originalValue = fieldElement.value;
            
            // –í–≤–µ—Å—Ç–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
            fieldElement.value = scenario.value;
            
            // –í–∏–∫–ª–∏–∫–∞—Ç–∏ –ø–æ–¥—ñ—ó –¥–ª—è —Ç—Ä–∏–≥–µ—Ä—É –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
            fieldElement.dispatchEvent(new Event('input', { bubbles: true }));
            fieldElement.dispatchEvent(new Event('change', { bubbles: true }));
            fieldElement.dispatchEvent(new Event('blur', { bubbles: true }));
            
            // –î–∞—Ç–∏ —á–∞—Å –Ω–∞ —Ä–µ–∞–∫—Ü—ñ—é
            await this.helpers.delay(100);
            
            // 4. –ó–±—ñ—Ä —Å–∏–≥–Ω–∞–ª—ñ–≤ –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
            const signals = this.collectErrorSignals(fieldElement);
            
            // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è
            fieldElement.value = originalValue;
            
            // –í–∏–∑–Ω–∞—á–∏—Ç–∏ —á–∏ –±—É–ª–∞ –≤–∏—è–≤–ª–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞
            const errorDetected = [
                signals.html5_api.detected,
                signals.aria_support.detected,
                signals.dom_changes.detected,
                signals.css_states.detected
            ].some(Boolean);
            
            return {
                scenario: scenario,
                field_selector: this.helpers.generateSelector(fieldElement),
                error_detected: errorDetected,
                signals: signals,
                quality_score: this.calculateScenarioQuality(signals)
            };
            
        } catch (error) {
            this.helpers.log(`‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ü–µ–Ω–∞—Ä—ñ—é: ${error.message}`, 'warn');
            return {
                scenario: scenario,
                field_selector: this.helpers.generateSelector(fieldElement),
                error_detected: false,
                signals: this.emptySignals(),
                error: error.message,
                quality_score: 0.0
            };
        }
    }

    /**
     * 4. –ó–±—ñ—Ä —Å–∏–≥–Ω–∞–ª—ñ–≤ –ø—Ä–æ –ø–æ–º–∏–ª–∫—É (4 —Ä—ñ–≤–Ω—ñ)
     */
    collectErrorSignals(fieldElement) {
        const signals = {
            html5_api: {
                detected: false,
                valid: null,
                validation_message: '',
                details: {}
            },
            aria_support: {
                detected: false,
                aria_invalid: null,
                aria_describedby: null,
                describedby_content: '',
                role_alert_elements: []
            },
            dom_changes: {
                detected: false,
                nearby_error_elements: [],
                error_texts: []
            },
            css_states: {
                detected: false,
                invalid_pseudoclass: false,
                error_classes: []
            }
        };
        
        // 4.1. HTML5 Validity API
        try {
            if (fieldElement.validity) {
                signals.html5_api.valid = fieldElement.validity.valid;
                signals.html5_api.validation_message = fieldElement.validationMessage || '';
                signals.html5_api.detected = !fieldElement.validity.valid;
                signals.html5_api.details = {
                    valueMissing: fieldElement.validity.valueMissing,
                    typeMismatch: fieldElement.validity.typeMismatch,
                    patternMismatch: fieldElement.validity.patternMismatch,
                    tooLong: fieldElement.validity.tooLong,
                    tooShort: fieldElement.validity.tooShort,
                    rangeUnderflow: fieldElement.validity.rangeUnderflow,
                    rangeOverflow: fieldElement.validity.rangeOverflow,
                    stepMismatch: fieldElement.validity.stepMismatch
                };
            }
        } catch (e) {
            // HTML5 API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ
        }
        
        // 4.2. ARIA —Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å
        const ariaInvalid = fieldElement.getAttribute('aria-invalid');
        signals.aria_support.aria_invalid = ariaInvalid;
        if (ariaInvalid === 'true') {
            signals.aria_support.detected = true;
        }
        
        const ariaDescribedby = fieldElement.getAttribute('aria-describedby');
        signals.aria_support.aria_describedby = ariaDescribedby;
        if (ariaDescribedby) {
            const describedElements = ariaDescribedby.split(' ')
                .map(id => document.getElementById(id))
                .filter(el => el);
            
            if (describedElements.length > 0) {
                signals.aria_support.describedby_content = describedElements
                    .map(el => el.textContent.trim())
                    .join(' ');
                if (signals.aria_support.describedby_content) {
                    signals.aria_support.detected = true;
                }
            }
        }
        
        // –ü–æ—à—É–∫ role="alert" –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
        const alertElements = Array.from(document.querySelectorAll('[role="alert"]'));
        signals.aria_support.role_alert_elements = alertElements
            .filter(el => el.textContent.trim())
            .map(el => ({
                text: el.textContent.trim(),
                id: el.id,
                className: el.className
            }));
        
        if (signals.aria_support.role_alert_elements.length > 0) {
            signals.aria_support.detected = true;
        }
        
        // 4.3. DOM-–∑–º—ñ–Ω–∏ –±—ñ–ª—è —ñ–Ω–ø—É—Ç—É
        const fieldContainer = fieldElement.closest('div, fieldset, section, form') || fieldElement.parentElement;
        if (fieldContainer) {
            const errorSelectors = [
                '.error', '.invalid', '.warning', '.alert',
                '.error-message', '.field-error', '.validation-error',
                '.help-block', '.form-error', '.input-error'
            ];
            
            const errorElements = [];
            errorSelectors.forEach(selector => {
                const elements = fieldContainer.querySelectorAll(selector);
                elements.forEach(el => {
                    const text = el.textContent.trim();
                    if (text && text.length < 200) { // –†–æ–∑—É–º–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
                        errorElements.push({
                            selector: selector,
                            text: text,
                            visible: this.helpers.isElementVisible(el),
                            id: el.id,
                            className: el.className
                        });
                    }
                });
            });
            
            signals.dom_changes.nearby_error_elements = errorElements;
            signals.dom_changes.error_texts = errorElements.map(el => el.text);
            
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ —É —Ç–µ–∫—Å—Ç–∞—Ö
            const errorKeywords = [
                'invalid', 'required', 'must', 'error', 'wrong', 'incorrect',
                '–Ω–µ–≤—ñ—Ä–Ω–∏–π', '–æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π', '–ø–æ–º–∏–ª–∫–∞', '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π', '–≤–≤–µ–¥—ñ—Ç—å', '–≤–∏–±–µ—Ä—ñ—Ç—å'
            ];
            
            const hasErrorKeywords = signals.dom_changes.error_texts.some(text => 
                errorKeywords.some(keyword => text.toLowerCase().includes(keyword.toLowerCase()))
            );
            
            if (errorElements.length > 0 && hasErrorKeywords) {
                signals.dom_changes.detected = true;
            }
        }
        
        // 4.4. CSS-—Å—Ç–∞—Ç—É—Å–∏
        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ CSS –∫–ª–∞—Å—ñ–≤ –ø–æ–º–∏–ª–æ–∫
            const errorClasses = ['error', 'invalid', 'warning', 'has-error', 'is-invalid'];
            const fieldClasses = Array.from(fieldElement.classList);
            const foundErrorClasses = fieldClasses.filter(cls => 
                errorClasses.some(errorCls => cls.toLowerCase().includes(errorCls))
            );
            
            signals.css_states.error_classes = foundErrorClasses;
            if (foundErrorClasses.length > 0) {
                signals.css_states.detected = true;
            }
            
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Å–µ–≤–¥–æ–∫–ª–∞—Å—É :invalid (—Å–ø—Ä–æ—â–µ–Ω–∞)
            if (fieldElement.matches && fieldElement.matches(':invalid')) {
                signals.css_states.invalid_pseudoclass = true;
                signals.css_states.detected = true;
            }
            
        } catch (e) {
            // CSS –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ –≤–¥–∞–ª–∞—Å—è
        }
        
        return signals;
    }

    /**
     * –ü–æ—Ä–æ–∂–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤
     */
    emptySignals() {
        return {
            html5_api: { detected: false, valid: null, validation_message: '', details: {} },
            aria_support: { detected: false, aria_invalid: null, aria_describedby: null, describedby_content: '', role_alert_elements: [] },
            dom_changes: { detected: false, nearby_error_elements: [], error_texts: [] },
            css_states: { detected: false, invalid_pseudoclass: false, error_classes: [] }
        };
    }

    /**
     * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —è–∫–æ—Å—Ç—ñ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä—ñ—é
     */
    calculateScenarioQuality(signals) {
        let score = 0.0;
        
        // HTML5 API (25%)
        if (signals.html5_api.detected) {
            score += 0.25;
        }
        
        // ARIA –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ (35%)
        if (signals.aria_support.detected) {
            let ariaScore = 0.0;
            if (signals.aria_support.aria_invalid === 'true') {
                ariaScore += 0.15;
            }
            if (signals.aria_support.describedby_content) {
                ariaScore += 0.15;
            }
            if (signals.aria_support.role_alert_elements.length > 0) {
                ariaScore += 0.05;
            }
            score += Math.min(ariaScore, 0.35);
        }
        
        // DOM –∑–º—ñ–Ω–∏ (25%)
        if (signals.dom_changes.detected) {
            score += 0.25;
        }
        
        // CSS —Å—Ç–∞–Ω–∏ (15%)
        if (signals.css_states.detected) {
            score += 0.15;
        }
        
        return Math.min(score, 1.0);
    }

    /**
     * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ—ó —è–∫–æ—Å—Ç—ñ –ø–æ–ª—è
     */
    calculateFieldQualityScore(fieldResult) {
        if (!fieldResult.test_scenarios || fieldResult.test_scenarios.length === 0) {
            return 0.0;
        }
        
        // –°–µ—Ä–µ–¥–Ω—è —è–∫—ñ—Å—Ç—å –ø–æ –≤—Å—ñ—Ö —Å—Ü–µ–Ω–∞—Ä—ñ—è—Ö
        const scenarioScores = fieldResult.test_scenarios.map(s => s.quality_score || 0.0);
        const avgScenarioScore = scenarioScores.reduce((a, b) => a + b, 0) / scenarioScores.length;
        
        // –ë–æ–Ω—É—Å –∑–∞ —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω—ñ—Å—Ç—å –ø—ñ–¥—Ç—Ä–∏–º–∫–∏
        const detectionMethods = Object.values(fieldResult.error_detection_summary).filter(Boolean).length;
        const diversityBonus = Math.min(detectionMethods * 0.1, 0.2);
        
        return Math.min(avgScenarioScore + diversityBonus, 1.0);
    }

    /**
     * 6. –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
     */
    compileSystematicResults(formSelector, fieldTestResults) {
        const totalFields = fieldTestResults.length;
        const supportedFields = fieldTestResults.filter(field => field.overall_support).length;
        
        // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ—ó —è–∫–æ—Å—Ç—ñ —Ñ–æ—Ä–º–∏
        let averageQuality = 0.0;
        if (totalFields > 0) {
            const totalQuality = fieldTestResults.reduce((sum, field) => sum + field.quality_score, 0);
            averageQuality = totalQuality / totalFields;
        }
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Ç–æ–¥–∞—Ö –≤–∏—è–≤–ª–µ–Ω–Ω—è
        const detectionStats = {
            html5_api: fieldTestResults.filter(field => field.error_detection_summary.html5_api).length,
            aria_support: fieldTestResults.filter(field => field.error_detection_summary.aria_support).length,
            dom_changes: fieldTestResults.filter(field => field.error_detection_summary.dom_changes).length,
            css_states: fieldTestResults.filter(field => field.error_detection_summary.css_states).length
        };
        
        return {
            form_selector: formSelector,
            systematic_analysis: true,
            total_fields: totalFields,
            supported_fields: supportedFields,
            quality_score: averageQuality,
            field_results: fieldTestResults,
            detection_statistics: detectionStats,
            has_error_response: supportedFields > 0,
            field_specific_errors: fieldTestResults.some(field => field.overall_support),
            detailed_breakdown: {
                error_response: {
                    score: supportedFields > 0 ? 0.3 : 0.0,
                    description: `${supportedFields}/${totalFields} –ø–æ–ª—ñ–≤ –ø—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å –≤–∏—è–≤–ª–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫`
                },
                error_localization: {
                    score: supportedFields === totalFields ? 0.3 : 
                           supportedFields > totalFields / 2 ? 0.2 : 
                           supportedFields > 0 ? 0.1 : 0.0,
                    description: `–°–∏—Å—Ç–µ–º–∞—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑: ${supportedFields}/${totalFields} –ø–æ–ª—ñ–≤`
                },
                accessibility: {
                    score: Math.min(detectionStats.aria_support / Math.max(totalFields, 1) * 0.2, 0.2),
                    description: `ARIA –ø—ñ–¥—Ç—Ä–∏–º–∫–∞: ${detectionStats.aria_support}/${totalFields} –ø–æ–ª—ñ–≤`
                },
                message_quality: {
                    score: Math.min(averageQuality * 0.2, 0.2),
                    description: `–°–µ—Ä–µ–¥–Ω—è —è–∫—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: ${averageQuality.toFixed(2)}`
                }
            }
        };
    }

    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –¥–ª—è –≤–∏–ø–∞–¥–∫—ñ–≤ –ø–æ–º–∏–ª–æ–∫
     */
    createSystematicResult(reason, formSelector) {
        return {
            form_selector: formSelector,
            systematic_analysis: true,
            total_fields: 0,
            supported_fields: 0,
            quality_score: 0.0,
            field_results: [],
            detection_statistics: { html5_api: 0, aria_support: 0, dom_changes: 0, css_states: 0 },
            has_error_response: false,
            field_specific_errors: false,
            reason: reason,
            detailed_breakdown: {
                error_response: { score: 0.0, description: reason },
                error_localization: { score: 0.0, description: '–ù–µ —Ç–µ—Å—Ç—É–≤–∞–ª–æ—Å—è' },
                accessibility: { score: 0.0, description: '–ù–µ —Ç–µ—Å—Ç—É–≤–∞–ª–æ—Å—è' },
                message_quality: { score: 0.0, description: '–ù–µ —Ç–µ—Å—Ç—É–≤–∞–ª–æ—Å—è' }
            }
        };
    }
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
window.FormTester = FormTester;