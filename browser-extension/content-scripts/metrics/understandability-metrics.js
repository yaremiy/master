/**
 * Understandability Metrics - –ú–µ—Ç—Ä–∏–∫–∏ –∑—Ä–æ–∑—É–º—ñ–ª–æ—Å—Ç—ñ
 * –ü–æ—Ä—Ç–æ–≤–∞–Ω–æ –∑ Python –∫–æ–¥—É –∑ –ø–æ–≤–Ω–∏–º –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º –≥—ñ–±—Ä–∏–¥–Ω–æ—ó –ª–æ–≥—ñ–∫–∏
 */

class UnderstandabilityMetrics extends BaseMetrics {
    constructor() {
        super();
        this.metricName = 'understandability';
        this.formTester = new FormTester();
    }

    /**
     * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ—ó –º–µ—Ç—Ä–∏–∫–∏ –∑—Ä–æ–∑—É–º—ñ–ª–æ—Å—Ç—ñ
     */
    async calculateMetric(pageData) {
        this.helpers.log('üß† –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–µ—Ç—Ä–∏–∫–∏ –∑—Ä–æ–∑—É–º—ñ–ª–æ—Å—Ç—ñ...');

        const metrics = {
            errorSupport: await this.calculateErrorSupportMetricEnhanced(pageData),
            headingStructure: await this.calculateHeadingStructure(pageData),
            linkPurpose: await this.calculateLinkPurpose(pageData),
            readability: await this.calculateReadability(pageData)
        };

        // –í–∞–≥–æ–≤—ñ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏ –¥–ª—è –ø—ñ–¥–º–µ—Ç—Ä–∏–∫
        const weights = {
            errorSupport: 0.4,      // 40% - –Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à–µ (—Ñ–æ—Ä–º–∏)
            headingStructure: 0.25, // 25% - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É
            linkPurpose: 0.2,       // 20% - –∑—Ä–æ–∑—É–º—ñ–ª—ñ—Å—Ç—å –ø–æ—Å–∏–ª–∞–Ω—å
            readability: 0.15       // 15% - —á–∏—Ç–∞–±–µ–ª—å–Ω—ñ—Å—Ç—å —Ç–µ–∫—Å—Ç—É
        };

        let totalScore = 0;
        let totalWeight = 0;

        Object.entries(weights).forEach(([metric, weight]) => {
            if (metrics[metric] !== undefined && metrics[metric] !== null) {
                totalScore += metrics[metric] * weight;
                totalWeight += weight;
            }
        });

        const finalScore = totalWeight > 0 ? totalScore / totalWeight : 1.0;

        this.logResult('Understandability', finalScore,
            `ErrorSupport: ${(metrics.errorSupport * 100).toFixed(1)}%, ` +
            `Headings: ${(metrics.headingStructure * 100).toFixed(1)}%, ` +
            `Links: ${(metrics.linkPurpose * 100).toFixed(1)}%`
        );

        return finalScore;
    }

    /**
     * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–µ—Ç—Ä–∏–∫–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –ø–æ–º–∏–ª–æ–∫ –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º –∞–Ω–∞–ª—ñ–∑–æ–º
     * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—é —Å—Ç–∞—Ç–∏—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É —Ç–∞ –¥–∏–Ω–∞–º—ñ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
     * 
     * –§–æ—Ä–º—É–ª–∞: X = (static_score * 0.4) + (dynamic_score * 0.6)
     */
    async calculateErrorSupportMetricEnhanced(pageData) {
        this.helpers.log('üö® –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –ø–æ–º–∏–ª–æ–∫ (–≥—ñ–±—Ä–∏–¥–Ω–∏–π)...');

        const htmlContent = pageData.html_content || document.documentElement.outerHTML;
        const forms = pageData.forms || [];

        if (forms.length === 0) {
            // –®—É–∫–∞—î–º–æ –æ–∫—Ä–µ–º—ñ –ø–æ–ª—è
            const individualFields = document.querySelectorAll('input, textarea, select');
            if (individualFields.length === 0) {
                this.helpers.log('‚ö†Ô∏è –ü–æ–ª—è –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ 1.0');
                return 1.0;
            }
            // –û–±—Ä–æ–±–ª—è—î–º–æ —è–∫ –æ–¥–Ω—É –≤—ñ—Ä—Ç—É–∞–ª—å–Ω—É —Ñ–æ—Ä–º—É
            forms.push(document.body);
        }

        this.helpers.log(`üìã –ó–Ω–∞–π–¥–µ–Ω–æ —Ñ–æ—Ä–º: ${forms.length}`);

        // –°—Ç–∞—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ (40% –≤–∞–≥–∏)
        this.helpers.log('üìä –°—Ç–∞—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ (40% –≤–∞–≥–∏):');
        let staticTotalQuality = 0.0;

        for (let i = 0; i < forms.length; i++) {
            const form = forms[i];
            this.helpers.log(`üîç –°—Ç–∞—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Ñ–æ—Ä–º–∏ ${i + 1}:`);
            
            const formQuality = this.analyzeFormErrorSupportQuality(form, htmlContent);
            staticTotalQuality += formQuality;
            
            this.helpers.log(`   üéØ –°—Ç–∞—Ç–∏—á–Ω–∞ —è–∫—ñ—Å—Ç—å: ${formQuality.toFixed(3)}`);
        }

        const staticAverage = staticTotalQuality / forms.length;
        this.helpers.log(`üìä –°–µ—Ä–µ–¥–Ω—è —Å—Ç–∞—Ç–∏—á–Ω–∞ —è–∫—ñ—Å—Ç—å: ${staticAverage.toFixed(3)}`);

        // –î–∏–Ω–∞–º—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ (60% –≤–∞–≥–∏)
        this.helpers.log('üß™ –î–∏–Ω–∞–º—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ (60% –≤–∞–≥–∏):');
        let dynamicAverage = 0.0;
        const dynamicResults = [];

        for (let i = 0; i < forms.length; i++) {
            const form = forms[i];
            try {
                const formSelector = form.id ? `#${form.id}` : 
                                   form.tagName === 'FORM' ? `form:nth-of-type(${i + 1})` : 
                                   'body';
                
                this.helpers.log(`üß™ –î–∏–Ω–∞–º—ñ—á–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ–æ—Ä–º–∏ ${i + 1}: ${formSelector}`);
                
                const testResult = await this.formTester.testFormErrorBehaviorSystematic(formSelector);
                
                if (testResult.error || testResult.reason) {
                    this.helpers.log(`‚ùå –§–æ—Ä–º–∞ ${i + 1}: –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è - ${testResult.error || testResult.reason}`);
                    dynamicResults.push(0.0);
                } else {
                    const dynamicQuality = testResult.quality_score || 0.0;
                    dynamicResults.push(dynamicQuality);
                    
                    this.helpers.log(`‚úÖ –§–æ—Ä–º–∞ ${i + 1}: –î–∏–Ω–∞–º—ñ—á–Ω–∞ —è–∫—ñ—Å—Ç—å = ${dynamicQuality.toFixed(3)}`);
                    
                    // –î–µ—Ç–∞–ª—å–Ω–∏–π —Ä–æ–∑–±—ñ—Ä –¥–∏–Ω–∞–º—ñ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
                    const breakdown = testResult.detailed_breakdown || {};
                    Object.entries(breakdown).forEach(([category, data]) => {
                        const score = data.score || 0.0;
                        const description = data.description || '–ù–µ–º–∞—î –æ–ø–∏—Å—É';
                        this.helpers.log(`   üìã ${category}: ${score.toFixed(3)} - ${description}`);
                    });
                }
            } catch (error) {
                this.helpers.log(`‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–∏–Ω–∞–º—ñ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ–æ—Ä–º–∏ ${i + 1}: ${error.message}`, 'error');
                dynamicResults.push(0.0);
            }
        }

        if (dynamicResults.length > 0) {
            const dynamicTotal = dynamicResults.reduce((sum, score) => sum + score, 0);
            dynamicAverage = dynamicTotal / dynamicResults.length;
            this.helpers.log(`üìä –°–µ—Ä–µ–¥–Ω—è –¥–∏–Ω–∞–º—ñ—á–Ω–∞ —è–∫—ñ—Å—Ç—å: ${dynamicAverage.toFixed(3)}`);
        } else {
            this.helpers.log('‚ö†Ô∏è –ñ–æ–¥–Ω–æ–≥–æ —É—Å–ø—ñ—à–Ω–æ–≥–æ –¥–∏–Ω–∞–º—ñ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç—É');
            dynamicAverage = 0.0;
        }

        // –ö–æ–º–±—ñ–Ω–æ–≤–∞–Ω–∏–π —Å–∫–æ—Ä
        let combinedScore;
        if (dynamicAverage > 0) {
            // –Ø–∫—â–æ —î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–∏–Ω–∞–º—ñ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≥—ñ–±—Ä–∏–¥–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥
            combinedScore = (staticAverage * 0.4) + (dynamicAverage * 0.6);
            this.helpers.log('üéØ –ì—ñ–±—Ä–∏–¥–Ω–∏–π —Å–∫–æ—Ä:');
            this.helpers.log(`   –°—Ç–∞—Ç–∏—á–Ω–∏–π: ${staticAverage.toFixed(3)} √ó 0.4 = ${(staticAverage * 0.4).toFixed(3)}`);
            this.helpers.log(`   –î–∏–Ω–∞–º—ñ—á–Ω–∏–π: ${dynamicAverage.toFixed(3)} √ó 0.6 = ${(dynamicAverage * 0.6).toFixed(3)}`);
            this.helpers.log(`   –ö–æ–º–±—ñ–Ω–æ–≤–∞–Ω–∏–π: ${combinedScore.toFixed(3)}`);
        } else {
            // –Ø–∫—â–æ –Ω–µ–º–∞—î –¥–∏–Ω–∞–º—ñ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —Å—Ç–∞—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
            combinedScore = staticAverage;
            this.helpers.log(`‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ —Å—Ç–∞—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑: ${combinedScore.toFixed(3)}`);
        }

        this.helpers.log(`üìä –§—ñ–Ω–∞–ª—å–Ω–∏–π —Å–∫–æ—Ä –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –ø–æ–º–∏–ª–æ–∫: ${combinedScore.toFixed(3)}`);
        return combinedScore;
    }

    /**
     * –ê–Ω–∞–ª—ñ–∑ —è–∫–æ—Å—Ç—ñ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –ø–æ–º–∏–ª–æ–∫ –¥–ª—è —Ñ–æ—Ä–º–∏ (—Å—Ç–∞—Ç–∏—á–Ω–∏–π)
     */
    analyzeFormErrorSupportQuality(form, htmlContent) {
        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –ø–æ–ª—è –≤ —Ñ–æ—Ä–º—ñ
        const fields = form.querySelectorAll('input, textarea, select');
        const validatableFields = Array.from(fields).filter(field => this.fieldNeedsValidation(field));

        if (validatableFields.length === 0) {
            return 1.0; // –ù–µ–º–∞—î –ø–æ–ª—ñ–≤ –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
        }

        let totalQuality = 0.0;

        validatableFields.forEach(field => {
            const fieldQuality = this.analyzeFieldErrorSupport(field, htmlContent);
            totalQuality += fieldQuality;
        });

        return totalQuality / validatableFields.length;
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø–æ–ª–µ –ø–æ—Ç—Ä–µ–±—É—î –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
     */
    fieldNeedsValidation(field) {
        const fieldType = field.type || field.tagName.toLowerCase();
        
        return field.required ||
               field.pattern ||
               ['email', 'url', 'tel', 'number', 'date', 'time', 'datetime-local'].includes(fieldType) ||
               (field.minLength && field.minLength > 0) ||
               (field.maxLength && field.maxLength > 0 && field.maxLength < 524288) ||
               field.min !== '' ||
               field.max !== '';
    }

    /**
     * –ê–Ω–∞–ª—ñ–∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –ø–æ–º–∏–ª–æ–∫ –¥–ª—è –æ–∫—Ä–µ–º–æ–≥–æ –ø–æ–ª—è
     */
    analyzeFieldErrorSupport(field, htmlContent) {
        // –§–∞–∑–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑
        const phase1Score = this.phase1BasicErrorSupport(field, htmlContent);
        const phase2Score = this.phase2MessageQuality(field, htmlContent);
        const phase3Score = this.phase3DynamicValidation(field, htmlContent);

        return phase1Score + phase2Score + phase3Score;
    }

    /**
     * –§–∞–∑–∞ 1: –ë–∞–∑–æ–≤—ñ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è (–º–∞–∫—Å–∏–º—É–º 0.4)
     */
    phase1BasicErrorSupport(field, htmlContent) {
        let score = 0.0;

        // 1. –í–∞–ª—ñ–¥–∞—Ü—ñ—è (required/pattern) - 0.1
        if (field.required || field.pattern) {
            score += 0.1;
        }

        // 2. aria-invalid - 0.1
        if (field.hasAttribute('aria-invalid')) {
            score += 0.1;
        }

        // 3. aria-describedby –∑–≤'—è–∑–æ–∫ - 0.1
        const ariaDescribedby = field.getAttribute('aria-describedby');
        if (ariaDescribedby && this.checkAriaDescribedbyExists(ariaDescribedby, htmlContent)) {
            score += 0.1;
        }

        // 4. role="alert" –µ–ª–µ–º–µ–Ω—Ç–∏ - 0.1
        if (this.checkAlertElementsExist(htmlContent)) {
            score += 0.1;
        }

        return score;
    }

    /**
     * –§–∞–∑–∞ 2: –Ø–∫—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–º–∞–∫—Å–∏–º—É–º 0.3)
     */
    phase2MessageQuality(field, htmlContent) {
        const errorMessages = this.findErrorMessagesForField(field, htmlContent);
        
        if (errorMessages.length === 0) {
            return 0.0;
        }

        let totalQuality = 0.0;
        errorMessages.forEach(message => {
            totalQuality += this.assessErrorMessageQuality(message);
        });

        const averageQuality = totalQuality / errorMessages.length;
        return averageQuality * 0.3;
    }

    /**
     * –§–∞–∑–∞ 3: –î–∏–Ω–∞–º—ñ—á–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è (–º–∞–∫—Å–∏–º—É–º 0.3)
     */
    phase3DynamicValidation(field, htmlContent) {
        let score = 0.0;

        // 1. Live regions - 0.15
        if (this.checkLiveRegionsExist(htmlContent)) {
            score += 0.15;
        }

        // 2. JavaScript –≤–∞–ª—ñ–¥–∞—Ü—ñ—è - 0.15
        if (this.detectJavaScriptValidation(field, htmlContent)) {
            score += 0.15;
        }

        return score;
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è aria-describedby –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
     */
    checkAriaDescribedbyExists(ariaDescribedby, htmlContent) {
        const ids = ariaDescribedby.split(' ');
        return ids.some(id => document.getElementById(id) !== null);
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è alert –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
     */
    checkAlertElementsExist(htmlContent) {
        return document.querySelector('[role="alert"]') !== null;
    }

    /**
     * –ü–æ—à—É–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏ –¥–ª—è –ø–æ–ª—è
     */
    findErrorMessagesForField(field, htmlContent) {
        const messages = [];

        // 1. aria-describedby
        const ariaDescribedby = field.getAttribute('aria-describedby');
        if (ariaDescribedby) {
            const ids = ariaDescribedby.split(' ');
            ids.forEach(id => {
                const element = document.getElementById(id);
                if (element && element.textContent.trim()) {
                    messages.push(element.textContent.trim());
                }
            });
        }

        // 2. –ü–æ—à—É–∫ –ø–æ—Ä—É—á –∑ –ø–æ–ª–µ–º
        const container = field.closest('div, fieldset, section') || field.parentElement;
        if (container) {
            const errorSelectors = [
                '.error', '.invalid', '.warning', '.alert',
                '.error-message', '.field-error', '.validation-error'
            ];

            errorSelectors.forEach(selector => {
                const errorElements = container.querySelectorAll(selector);
                errorElements.forEach(el => {
                    const text = el.textContent.trim();
                    if (text && !messages.includes(text)) {
                        messages.push(text);
                    }
                });
            });
        }

        return messages;
    }

    /**
     * –û—Ü—ñ–Ω–∫–∞ —è–∫–æ—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
     */
    assessErrorMessageQuality(message) {
        let quality = 0.0;

        // –î–æ–≤–∂–∏–Ω–∞ (–Ω–µ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–µ/–¥–æ–≤–≥–µ)
        const length = message.length;
        if (length >= 10 && length <= 100) {
            quality += 0.3;
        } else if (length >= 5 && length <= 150) {
            quality += 0.15;
        }

        // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
        const constructiveWords = [
            '–≤–≤–µ–¥—ñ—Ç—å', '–≤–∏–±–µ—Ä—ñ—Ç—å', '–ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ', '–º–∞—î –º—ñ—Å—Ç–∏—Ç–∏', '—Ñ–æ—Ä–º–∞—Ç',
            'please', 'enter', 'select', 'check', 'must contain', 'format'
        ];
        if (constructiveWords.some(word => message.toLowerCase().includes(word.toLowerCase()))) {
            quality += 0.4;
        }

        // –°–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ—Å—Ç—å
        const specificWords = [
            'email', '–ø–∞—Ä–æ–ª—å', '—Ç–µ–ª–µ—Ñ–æ–Ω', '–¥–∞—Ç–∞', '—Å–∏–º–≤–æ–ª—ñ–≤', '—Ü–∏—Ñ—Ä',
            'password', 'phone', 'date', 'characters', 'digits'
        ];
        if (specificWords.some(word => message.toLowerCase().includes(word.toLowerCase()))) {
            quality += 0.3;
        }

        return Math.min(quality, 1.0);
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è live regions
     */
    checkLiveRegionsExist(htmlContent) {
        return document.querySelector('[aria-live], [role="status"], [role="alert"]') !== null;
    }

    /**
     * –í–∏—è–≤–ª–µ–Ω–Ω—è JavaScript –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
     */
    detectJavaScriptValidation(field, htmlContent) {
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ event listeners
        if (field.onblur || field.oninput || field.onchange) {
            return true;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞—Ç—Ä–∏–±—É—Ç—ñ–≤
        const eventAttributes = ['onblur', 'oninput', 'onchange', 'onkeyup'];
        if (eventAttributes.some(attr => field.hasAttribute(attr))) {
            return true;
        }

        // –ï–≤—Ä–∏—Å—Ç–∏—á–Ω–∏–π –ø–æ—à—É–∫ –≤ HTML
        const validationKeywords = [
            'validate', 'validation', 'error', 'invalid',
            '–≤–∞–ª—ñ–¥–∞—Ü—ñ—è', '–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞', '–ø–æ–º–∏–ª–∫–∞'
        ];

        return validationKeywords.some(keyword => 
            htmlContent.toLowerCase().includes(keyword.toLowerCase())
        );
    }

    /**
     * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
     */
    async calculateHeadingStructure(pageData) {
        const headings = pageData.headings || this.getHeadings();
        
        if (headings.length === 0) {
            return 1.0; // –ù–µ–º–∞—î –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ = –Ω–µ–º–∞—î –ø—Ä–æ–±–ª–µ–º
        }

        const headingStats = this.gatherElementStats(headings, (heading) => {
            return this.checkHeadingStructure(heading, headings);
        });

        return this.calculateSuccessRate(headingStats.passed, headingStats.total);
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞
     */
    checkHeadingStructure(heading, allHeadings) {
        const level = parseInt(heading.tagName.charAt(1));
        const text = this.getElementText(heading);
        const index = allHeadings.indexOf(heading);

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–µ–∫—Å—Ç—É
        if (!text) {
            return this.createCheckResult(false, '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –±–µ–∑ —Ç–µ–∫—Å—Ç—É', 'high');
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–≤–∂–∏–Ω–∏
        if (text.length < 2) {
            return this.createCheckResult(false, '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π', 'medium');
        }

        if (text.length > 120) {
            return this.createCheckResult(false, '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π', 'low');
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª–æ–≥—ñ—á–Ω–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
        if (index > 0) {
            const prevHeading = allHeadings[index - 1];
            const prevLevel = parseInt(prevHeading.tagName.charAt(1));
            
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ–ø—É—Å–∫—É —Ä—ñ–≤–Ω—ñ–≤
            if (level > prevLevel + 1) {
                return this.createCheckResult(false, 
                    `–ü—Ä–æ–ø—É—â–µ–Ω–æ —Ä—ñ–≤–µ–Ω—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ (–∑ h${prevLevel} –Ω–∞ h${level})`, 'medium');
            }
        } else {
            // –ü–µ—Ä—à–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–∞—î –±—É—Ç–∏ h1
            if (level !== 1) {
                return this.createCheckResult(false, 
                    `–ü–µ—Ä—à–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–∞—î –±—É—Ç–∏ h1, –∞ –Ω–µ h${level}`, 'medium');
            }
        }

        return this.createCheckResult(true, '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏–π', 'info', {
            level,
            text: text.substring(0, 50) + (text.length > 50 ? '...' : '')
        });
    }

    /**
     * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω—å
     */
    async calculateLinkPurpose(pageData) {
        const links = pageData.links || this.getLinks();
        
        if (links.length === 0) {
            return 1.0; // –ù–µ–º–∞—î –ø–æ—Å–∏–ª–∞–Ω—å = –Ω–µ–º–∞—î –ø—Ä–æ–±–ª–µ–º
        }

        const linkStats = this.gatherElementStats(links, (link) => {
            return this.checkLinkPurpose(link);
        });

        return this.calculateSuccessRate(linkStats.passed, linkStats.total);
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è
     */
    checkLinkPurpose(link) {
        const href = link.getAttribute('href');
        const text = this.getElementText(link);
        const ariaLabel = link.getAttribute('aria-label');
        const title = link.getAttribute('title');

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ href
        if (!href || href === '#') {
            return this.createCheckResult(false, '–ü–æ—Å–∏–ª–∞–Ω–Ω—è –±–µ–∑ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è (href="#" –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—î)', 'high');
        }

        // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —ñ–º–µ–Ω—ñ
        const accessibleName = ariaLabel || text || title;
        
        if (!accessibleName) {
            return this.createCheckResult(false, '–ü–æ—Å–∏–ª–∞–Ω–Ω—è –±–µ–∑ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —ñ–º–µ–Ω—ñ', 'high');
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —è–∫–æ—Å—Ç—ñ —Ç–µ–∫—Å—Ç—É –ø–æ—Å–∏–ª–∞–Ω–Ω—è
        const textQuality = this.assessLinkTextQuality(accessibleName, href);
        
        if (textQuality.score < 0.5) {
            return this.createCheckResult(false, 
                `–ù–µ—è–∫—ñ—Å–Ω–∏–π —Ç–µ–∫—Å—Ç –ø–æ—Å–∏–ª–∞–Ω–Ω—è: ${textQuality.issues.join(', ')}`, 'medium', textQuality);
        }

        return this.createCheckResult(true, '–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑—Ä–æ–∑—É–º—ñ–ª–µ', 'info', {
            text: accessibleName,
            href: href.substring(0, 50) + (href.length > 50 ? '...' : ''),
            quality: textQuality.score
        });
    }

    /**
     * –û—Ü—ñ–Ω–∫–∞ —è–∫–æ—Å—Ç—ñ —Ç–µ–∫—Å—Ç—É –ø–æ—Å–∏–ª–∞–Ω–Ω—è
     */
    assessLinkTextQuality(text, href) {
        const issues = [];
        let score = 1.0;

        // –ü–æ–≥–∞–Ω—ñ –ø—Ä–∞–∫—Ç–∏–∫–∏
        const badTexts = [
            'click here', 'here', 'read more', 'more', 'link',
            '–∫–ª—ñ–∫–Ω—ñ—Ç—å —Ç—É—Ç', '—Ç—É—Ç', '—á–∏—Ç–∞—Ç–∏ –¥–∞–ª—ñ', '–¥–∞–ª—ñ', '–ø–æ—Å–∏–ª–∞–Ω–Ω—è'
        ];

        if (badTexts.some(bad => text.toLowerCase().includes(bad.toLowerCase()))) {
            issues.push('–∑–∞–≥–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç');
            score -= 0.4;
        }

        // –ó–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç
        if (text.length < 3) {
            issues.push('–∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π');
            score -= 0.3;
        }

        // URL —è–∫ —Ç–µ–∫—Å—Ç
        if (text.includes('http') || text.includes('www.')) {
            issues.push('URL —è–∫ —Ç–µ–∫—Å—Ç');
            score -= 0.2;
        }

        // –ü–æ–≤—Ç–æ—Ä—é–≤–∞–Ω—ñ —Å–∏–º–≤–æ–ª–∏
        if (/(.)\1{3,}/.test(text)) {
            issues.push('–ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω—ñ —Å–∏–º–≤–æ–ª–∏');
            score -= 0.1;
        }

        return {
            score: Math.max(score, 0),
            issues
        };
    }

    /**
     * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ
     */
    async calculateReadability(pageData) {
        const textElements = this.getTextElements();
        
        if (textElements.length === 0) {
            return 1.0;
        }

        // –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
        const elementsToCheck = textElements.slice(0, 20);
        
        const readabilityStats = this.gatherElementStats(elementsToCheck, (element) => {
            return this.checkTextReadability(element);
        });

        return this.calculateSuccessRate(readabilityStats.passed, readabilityStats.total);
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
     */
    getTextElements() {
        const selectors = ['p', 'div', 'span', 'li', 'td', 'th'];
        const elements = [];
        
        selectors.forEach(selector => {
            const found = document.querySelectorAll(selector);
            elements.push(...Array.from(found));
        });

        return elements.filter(el => 
            this.helpers.isElementVisible(el) && 
            this.getElementText(el).length > 20 // –¢—ñ–ª—å–∫–∏ –µ–ª–µ–º–µ–Ω—Ç–∏ –∑ –¥–æ—Å—Ç–∞—Ç–Ω—ñ–º —Ç–µ–∫—Å—Ç–æ–º
        );
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ —Ç–µ–∫—Å—Ç—É
     */
    checkTextReadability(element) {
        const text = this.getElementText(element);
        const styles = this.getComputedStyles(element);
        
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–∑–º—ñ—Ä—É —à—Ä–∏—Ñ—Ç—É
        const fontSize = this.helpers.getFontSizeInPixels(element);
        if (fontSize < 12) {
            return this.createCheckResult(false, `–®—Ä–∏—Ñ—Ç –∑–∞–Ω–∞–¥—Ç–æ –º–∞–ª–∏–π: ${fontSize}px`, 'medium', { fontSize });
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–≤–∂–∏–Ω–∏ —Ä—è–¥–∫–∞
        const lineLength = this.estimateLineLength(element, text);
        if (lineLength > 80) {
            return this.createCheckResult(false, `–†—è–¥–æ–∫ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π: ~${lineLength} —Å–∏–º–≤–æ–ª—ñ–≤`, 'low', { lineLength });
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º—ñ–∂—Ä—è–¥–∫–æ–≤–æ–≥–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É
        const lineHeight = parseFloat(styles.lineHeight);
        if (lineHeight < 1.2) {
            return this.createCheckResult(false, `–ú–∞–ª–∏–π –º—ñ–∂—Ä—è–¥–∫–æ–≤–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª: ${lineHeight}`, 'low', { lineHeight });
        }

        return this.createCheckResult(true, '–¢–µ–∫—Å—Ç —á–∏—Ç–∞–±–µ–ª—å–Ω–∏–π', 'info', {
            fontSize,
            lineLength,
            lineHeight
        });
    }

    /**
     * –û—Ü—ñ–Ω–∫–∞ –¥–æ–≤–∂–∏–Ω–∏ —Ä—è–¥–∫–∞
     */
    estimateLineLength(element, text) {
        try {
            const rect = element.getBoundingClientRect();
            const styles = this.getComputedStyles(element);
            const fontSize = this.helpers.getFontSizeInPixels(element);
            
            // –ü—Ä–∏–±–ª–∏–∑–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ —Å–∏–º–≤–æ–ª—ñ–≤ –Ω–∞ —Ä—è–¥–æ–∫
            const avgCharWidth = fontSize * 0.6; // –ü—Ä–∏–±–ª–∏–∑–Ω–∞ —à–∏—Ä–∏–Ω–∞ —Å–∏–º–≤–æ–ª–∞
            const availableWidth = rect.width - 
                parseFloat(styles.paddingLeft) - 
                parseFloat(styles.paddingRight);
            
            return Math.floor(availableWidth / avgCharWidth);
        } catch (error) {
            return 50; // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        }
    }

    /**
     * –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –¥–ª—è UI
     */
    async getDetailedAnalysis(pageData) {
        return {
            errorSupport: await this.analyzeErrorSupport(pageData),
            headings: await this.analyzeHeadings(pageData),
            links: await this.analyzeLinks(pageData),
            readability: await this.analyzeReadability(pageData)
        };
    }

    async analyzeErrorSupport(pageData) {
        const forms = pageData.forms || [];
        const results = {
            total: forms.length,
            withSupport: 0,
            problematic: []
        };

        for (const form of forms) {
            const quality = this.analyzeFormErrorSupportQuality(form, pageData.html_content);
            if (quality >= 0.5) {
                results.withSupport++;
            } else {
                results.problematic.push({
                    selector: this.helpers.generateSelector(form),
                    quality: quality,
                    message: `–ù–∏–∑—å–∫–∞ —è–∫—ñ—Å—Ç—å –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –ø–æ–º–∏–ª–æ–∫: ${(quality * 100).toFixed(1)}%`
                });
            }
        }

        return results;
    }

    async analyzeHeadings(pageData) {
        const headings = pageData.headings || this.getHeadings();
        const results = {
            total: headings.length,
            proper: 0,
            problematic: []
        };

        headings.forEach(heading => {
            const check = this.checkHeadingStructure(heading, headings);
            if (check.passed) {
                results.proper++;
            } else {
                results.problematic.push({
                    selector: this.helpers.generateSelector(heading),
                    message: check.message,
                    severity: check.severity
                });
            }
        });

        return results;
    }

    async analyzeLinks(pageData) {
        const links = pageData.links || this.getLinks();
        const results = {
            total: links.length,
            clear: 0,
            problematic: []
        };

        links.forEach(link => {
            const check = this.checkLinkPurpose(link);
            if (check.passed) {
                results.clear++;
            } else {
                results.problematic.push({
                    selector: this.helpers.generateSelector(link),
                    message: check.message,
                    severity: check.severity
                });
            }
        });

        return results;
    }

    async analyzeReadability(pageData) {
        const textElements = this.getTextElements().slice(0, 10);
        const results = {
            total: textElements.length,
            readable: 0,
            problematic: []
        };

        textElements.forEach(element => {
            const check = this.checkTextReadability(element);
            if (check.passed) {
                results.readable++;
            } else {
                results.problematic.push({
                    selector: this.helpers.generateSelector(element),
                    message: check.message,
                    severity: check.severity
                });
            }
        });

        return results;
    }
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
window.UnderstandabilityMetrics = UnderstandabilityMetrics;