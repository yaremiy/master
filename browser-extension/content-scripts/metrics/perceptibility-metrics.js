/**
 * Perceptibility Metrics - –ú–µ—Ç—Ä–∏–∫–∏ —Å–ø—Ä–∏–π–Ω—è—Ç–Ω–æ—Å—Ç—ñ
 * –ü–æ—Ä—Ç–æ–≤–∞–Ω–æ –∑ Python –∫–æ–¥—É –∑ –ø–æ–≤–Ω–∏–º –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º –ª–æ–≥—ñ–∫–∏
 */

class PerceptibilityMetrics extends BaseMetrics {
    constructor() {
        super();
        this.metricName = 'perceptibility';
    }

    /**
     * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ—ó –º–µ—Ç—Ä–∏–∫–∏ —Å–ø—Ä–∏–π–Ω—è—Ç–Ω–æ—Å—Ç—ñ
     */
    async calculateMetric(pageData) {
        this.helpers.log('üîç –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–µ—Ç—Ä–∏–∫–∏ —Å–ø—Ä–∏–π–Ω—è—Ç–Ω–æ—Å—Ç—ñ...');

        const metrics = {
            imageAlternatives: await this.calculateImageAlternatives(pageData),
            textContrast: await this.calculateTextContrast(pageData),
            mediaAlternatives: await this.calculateMediaAlternatives(pageData),
            colorUsage: await this.calculateColorUsage(pageData)
        };

        // –í–∞–≥–æ–≤—ñ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏ –¥–ª—è –ø—ñ–¥–º–µ—Ç—Ä–∏–∫
        const weights = {
            imageAlternatives: 0.4,  // 40% - –Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à–µ
            textContrast: 0.35,      // 35% - –¥—É–∂–µ –≤–∞–∂–ª–∏–≤–æ
            mediaAlternatives: 0.15, // 15% - –º–µ–Ω—à–µ –º–µ–¥—ñ–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É
            colorUsage: 0.1          // 10% - –¥–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
        };

        let totalScore = 0;
        let totalWeight = 0;

        Object.entries(weights).forEach(([metric, weight]) => {
            if (metrics[metric] !== undefined && metrics[metric] !== null) {
                totalScore += metrics[metric] * weight;
                totalWeight += weight;
            }
        });

        const finalScore = totalWeight > 0 ? totalScore / totalWeight : 1.0;

        this.logResult('Perceptibility', finalScore, 
            `Images: ${(metrics.imageAlternatives * 100).toFixed(1)}%, ` +
            `Contrast: ${(metrics.textContrast * 100).toFixed(1)}%, ` +
            `Media: ${(metrics.mediaAlternatives * 100).toFixed(1)}%`
        );

        return finalScore;
    }

    /**
     * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤ –¥–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω—å
     */
    async calculateImageAlternatives(pageData) {
        const images = pageData.images.filter(img => this.helpers.isElementVisible(img));
        
        if (images.length === 0) {
            return 1.0; // –ù–µ–º–∞—î –∑–æ–±—Ä–∞–∂–µ–Ω—å = –Ω–µ–º–∞—î –ø—Ä–æ–±–ª–µ–º
        }

        const imageStats = this.gatherElementStats(images, (img) => {
            return this.checkImageAlternative(img);
        });

        return this.calculateSuccessRate(imageStats.passed, imageStats.total);
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É –¥–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
     */
    checkImageAlternative(img) {
        const alt = img.getAttribute('alt');
        const ariaLabel = img.getAttribute('aria-label');
        const ariaLabelledby = img.getAttribute('aria-labelledby');
        const title = img.getAttribute('title');
        const role = img.getAttribute('role');

        // –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        if (role === 'presentation' || role === 'none' || alt === '') {
            return this.createCheckResult(true, '–î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–∑–Ω–∞—á–µ–Ω–µ', 'info');
        }

        // –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–º —Ç–µ–∫—Å—Ç–æ–º
        if (alt && alt.trim() !== '') {
            const altLength = alt.trim().length;
            if (altLength < 5) {
                return this.createCheckResult(false, 'Alt-—Ç–µ–∫—Å—Ç –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π', 'medium', { alt });
            }
            if (altLength > 125) {
                return this.createCheckResult(false, 'Alt-—Ç–µ–∫—Å—Ç –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π', 'low', { alt });
            }
            
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —è–∫–æ—Å—Ç—ñ alt-—Ç–µ–∫—Å—Ç—É
            const qualityIssues = this.checkAltTextQuality(alt);
            if (qualityIssues.length > 0) {
                return this.createCheckResult(false, `–ü—Ä–æ–±–ª–µ–º–∏ –∑ —è–∫—ñ—Å—Ç—é alt-—Ç–µ–∫—Å—Ç—É: ${qualityIssues.join(', ')}`, 'medium', { alt, issues: qualityIssues });
            }
            
            return this.createCheckResult(true, '–Ø–∫—ñ—Å–Ω–∏–π alt-—Ç–µ–∫—Å—Ç', 'info', { alt });
        }

        // ARIA –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∏
        if (ariaLabel && ariaLabel.trim() !== '') {
            return this.createCheckResult(true, '–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è aria-label', 'info', { ariaLabel });
        }

        if (ariaLabelledby) {
            const labelElement = document.getElementById(ariaLabelledby);
            if (labelElement && labelElement.textContent.trim()) {
                return this.createCheckResult(true, '–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è aria-labelledby', 'info', { ariaLabelledby });
            }
        }

        // Title —è–∫ –æ—Å—Ç–∞–Ω–Ω—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç
        if (title && title.trim() !== '') {
            return this.createCheckResult(false, '–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ title (–Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ)', 'medium', { title });
        }

        // –ù–µ–º–∞—î –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∏
        return this.createCheckResult(false, '–í—ñ–¥—Å—É—Ç–Ω—ñ–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π —Ç–µ–∫—Å—Ç', 'high');
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —è–∫–æ—Å—Ç—ñ alt-—Ç–µ–∫—Å—Ç—É
     */
    checkAltTextQuality(altText) {
        const issues = [];
        const lowerAlt = altText.toLowerCase();

        // –ü–æ–≥–∞–Ω—ñ –ø—Ä–∞–∫—Ç–∏–∫–∏
        const badPhrases = [
            'image of', 'picture of', 'photo of', 'graphic of',
            '–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è', '–∫–∞—Ä—Ç–∏–Ω–∫–∞', '—Ñ–æ—Ç–æ', '–º–∞–ª—é–Ω–æ–∫'
        ];

        badPhrases.forEach(phrase => {
            if (lowerAlt.includes(phrase)) {
                issues.push(`–º—ñ—Å—Ç–∏—Ç—å "${phrase}"`);
            }
        });

        // –§–∞–π–ª–æ–≤—ñ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è
        const fileExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.svg', '.webp'];
        fileExtensions.forEach(ext => {
            if (lowerAlt.includes(ext)) {
                issues.push('–º—ñ—Å—Ç–∏—Ç—å —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É');
            }
        });

        // –ü–æ–≤—Ç–æ—Ä—é–≤–∞–Ω—ñ —Å–∏–º–≤–æ–ª–∏
        if (/(.)\1{3,}/.test(altText)) {
            issues.push('–º—ñ—Å—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω—ñ —Å–∏–º–≤–æ–ª–∏');
        }

        return issues;
    }

    /**
     * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—ñ —Ç–µ–∫—Å—Ç—É
     */
    async calculateTextContrast(pageData) {
        const textElements = this.getTextElements();
        
        if (textElements.length === 0) {
            return 1.0;
        }

        // –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ (–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å)
        const elementsToCheck = textElements.slice(0, 50);
        
        const contrastStats = this.gatherElementStats(elementsToCheck, (element) => {
            return this.checkTextContrast(element);
        });

        return this.calculateSuccessRate(contrastStats.passed, contrastStats.total);
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—ñ
     */
    getTextElements() {
        const selectors = [
            'p', 'span', 'div', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6',
            'a', 'button', 'label', 'li', 'td', 'th', 'caption',
            'input[type="text"]', 'input[type="email"]', 'textarea'
        ];

        const elements = [];
        selectors.forEach(selector => {
            const found = document.querySelectorAll(selector);
            elements.push(...Array.from(found));
        });

        return elements.filter(el => 
            this.helpers.isElementVisible(el) && 
            this.getElementText(el).length > 0
        );
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—ñ —Ç–µ–∫—Å—Ç—É –µ–ª–µ–º–µ–Ω—Ç–∞
     */
    checkTextContrast(element) {
        try {
            const styles = this.getComputedStyles(element);
            const color = styles.color;
            const backgroundColor = this.getEffectiveBackgroundColor(element);
            
            if (!color || !backgroundColor) {
                return this.createCheckResult(false, '–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–æ–ª—å–æ—Ä–∏', 'low');
            }

            const contrast = this.helpers.calculateContrast(color, backgroundColor);
            const fontSize = this.helpers.getFontSizeInPixels(element);
            const fontWeight = styles.fontWeight;
            
            // –í–∏–∑–Ω–∞—á–∞—î–º–æ —á–∏ —Ç–µ–∫—Å—Ç –≤–µ–ª–∏–∫–∏–π
            const isLargeText = fontSize >= 18 || (fontSize >= 14 && (fontWeight === 'bold' || parseInt(fontWeight) >= 700));
            
            // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ –≤–∏–º–æ–≥–∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—ñ
            const minContrast = isLargeText ? 3.0 : 4.5;  // WCAG AA
            const enhancedContrast = isLargeText ? 4.5 : 7.0;  // WCAG AAA

            if (contrast >= enhancedContrast) {
                return this.createCheckResult(true, `–í—ñ–¥–º—ñ–Ω–Ω–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ñ—Å—Ç—å: ${contrast.toFixed(2)}:1`, 'info', 
                    { contrast, fontSize, isLargeText, level: 'AAA' });
            } else if (contrast >= minContrast) {
                return this.createCheckResult(true, `–î–æ—Å—Ç–∞—Ç–Ω—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ñ—Å—Ç—å: ${contrast.toFixed(2)}:1`, 'info', 
                    { contrast, fontSize, isLargeText, level: 'AA' });
            } else {
                const severity = contrast < minContrast * 0.7 ? 'high' : 'medium';
                return this.createCheckResult(false, `–ù–∏–∑—å–∫–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ñ—Å—Ç—å: ${contrast.toFixed(2)}:1 (–ø–æ—Ç—Ä—ñ–±–Ω–æ ${minContrast}:1)`, severity,
                    { contrast, fontSize, isLargeText, required: minContrast });
            }

        } catch (error) {
            return this.createCheckResult(false, `–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—ñ: ${error.message}`, 'low');
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–ª—å–æ—Ä—É —Ñ–æ–Ω—É (–∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤)
     */
    getEffectiveBackgroundColor(element) {
        let currentElement = element;
        
        while (currentElement && currentElement !== document.body) {
            const styles = this.getComputedStyles(currentElement);
            const bgColor = styles.backgroundColor;
            
            // –Ø–∫—â–æ —Ñ–æ–Ω –Ω–µ –ø—Ä–æ–∑–æ—Ä–∏–π
            if (bgColor && bgColor !== 'rgba(0, 0, 0, 0)' && bgColor !== 'transparent') {
                return bgColor;
            }
            
            currentElement = currentElement.parentElement;
        }
        
        // –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±—ñ–ª–∏–π —è–∫ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        return 'rgb(255, 255, 255)';
    }

    /**
     * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤ –¥–ª—è –º–µ–¥—ñ–∞
     */
    async calculateMediaAlternatives(pageData) {
        const videos = pageData.videos || [];
        const audios = pageData.audio || [];
        const allMedia = [...videos, ...audios];

        if (allMedia.length === 0) {
            return 1.0; // –ù–µ–º–∞—î –º–µ–¥—ñ–∞ = –Ω–µ–º–∞—î –ø—Ä–æ–±–ª–µ–º
        }

        const mediaStats = this.gatherElementStats(allMedia, (media) => {
            return this.checkMediaAlternatives(media);
        });

        return this.calculateSuccessRate(mediaStats.passed, mediaStats.total);
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤ –¥–ª—è –º–µ–¥—ñ–∞ –µ–ª–µ–º–µ–Ω—Ç–∞
     */
    checkMediaAlternatives(media) {
        const tagName = media.tagName.toLowerCase();
        
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—É–±—Ç–∏—Ç—Ä—ñ–≤ –¥–ª—è –≤—ñ–¥–µ–æ
        if (tagName === 'video') {
            const tracks = media.querySelectorAll('track[kind="captions"], track[kind="subtitles"]');
            if (tracks.length > 0) {
                return this.createCheckResult(true, `–ó–Ω–∞–π–¥–µ–Ω–æ ${tracks.length} –¥–æ—Ä—ñ–∂–æ–∫ —Å—É–±—Ç–∏—Ç—Ä—ñ–≤`, 'info');
            }
            
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ controls
            if (!media.hasAttribute('controls')) {
                return this.createCheckResult(false, '–í—ñ–¥–µ–æ –±–µ–∑ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è', 'medium');
            }
            
            return this.createCheckResult(false, '–í—ñ–¥–µ–æ –±–µ–∑ —Å—É–±—Ç–∏—Ç—Ä—ñ–≤', 'high');
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è –∞—É–¥—ñ–æ
        if (tagName === 'audio') {
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ controls
            if (!media.hasAttribute('controls')) {
                return this.createCheckResult(false, '–ê—É–¥—ñ–æ –±–µ–∑ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è', 'medium');
            }
            
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó (–µ–≤—Ä–∏—Å—Ç–∏—á–Ω–æ)
            const parent = media.parentElement;
            const transcript = parent?.querySelector('.transcript, .transcription, [data-transcript]');
            if (transcript) {
                return this.createCheckResult(true, '–ó–Ω–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—é', 'info');
            }
            
            return this.createCheckResult(false, '–ê—É–¥—ñ–æ –±–µ–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó', 'medium');
        }

        return this.createCheckResult(true, '–ú–µ–¥—ñ–∞ –µ–ª–µ–º–µ–Ω—Ç –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ', 'info');
    }

    /**
     * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É
     */
    async calculateColorUsage(pageData) {
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ —á–µ—Ä–µ–∑ –∫–æ–ª—ñ—Ä
        const colorOnlyElements = this.findColorOnlyInformation();
        
        if (colorOnlyElements.length === 0) {
            return 1.0; // –ù–µ–º–∞—î –ø—Ä–æ–±–ª–µ–º –∑ –∫–æ–ª—å–æ—Ä–æ–º
        }

        // –°–ø—Ä–æ—â–µ–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ - —è–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ –µ–ª–µ–º–µ–Ω—Ç–∏, —â–æ –ø–æ–∫–ª–∞–¥–∞—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –Ω–∞ –∫–æ–ª—ñ—Ä
        const problematicElements = colorOnlyElements.filter(el => !this.hasNonColorIndicators(el));
        
        return this.calculateSuccessRate(
            colorOnlyElements.length - problematicElements.length,
            colorOnlyElements.length
        );
    }

    /**
     * –ü–æ—à—É–∫ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤, —â–æ –º–æ–∂—É—Ç—å –ø–æ–∫–ª–∞–¥–∞—Ç–∏—Å—è —Ç—ñ–ª—å–∫–∏ –Ω–∞ –∫–æ–ª—ñ—Ä
     */
    findColorOnlyInformation() {
        const suspiciousElements = [];
        
        // –®—É–∫–∞—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏ –∑ –∫–æ–ª—å–æ—Ä–æ–≤–∏–º–∏ –∫–ª–∞—Å–∞–º–∏
        const colorClasses = [
            'red', 'green', 'blue', 'yellow', 'orange', 'purple',
            'success', 'error', 'warning', 'danger', 'info',
            'valid', 'invalid', 'required', 'optional'
        ];

        colorClasses.forEach(colorClass => {
            const elements = document.querySelectorAll(`[class*="${colorClass}"]`);
            suspiciousElements.push(...Array.from(elements));
        });

        // –®—É–∫–∞—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏ –∑ inline —Å—Ç–∏–ª—è–º–∏ –∫–æ–ª—å–æ—Ä—ñ–≤
        const styledElements = document.querySelectorAll('[style*="color"]');
        suspiciousElements.push(...Array.from(styledElements));

        return suspiciousElements.filter(el => this.helpers.isElementVisible(el));
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –µ–ª–µ–º–µ–Ω—Ç –º–∞—î –Ω–µ-–∫–æ–ª—å–æ—Ä–æ–≤—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏
     */
    hasNonColorIndicators(element) {
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–µ–∫—Å—Ç—É
        const text = this.getElementText(element);
        const indicatorWords = [
            'required', 'optional', 'error', 'success', 'warning',
            '–æ–±–æ–≤\'—è–∑–∫–æ–≤–æ', '–ø–æ–º–∏–ª–∫–∞', '—É—Å–ø—ñ—Ö', '–ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è',
            '*', '!', '‚úì', '‚úó', '‚ö†'
        ];

        if (indicatorWords.some(word => text.toLowerCase().includes(word.toLowerCase()))) {
            return true;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–∫–æ–Ω–æ–∫
        const icons = element.querySelectorAll('i, .icon, [class*="icon"], svg');
        if (icons.length > 0) {
            return true;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ ARIA –∞—Ç—Ä–∏–±—É—Ç—ñ–≤
        if (element.getAttribute('aria-label') || 
            element.getAttribute('aria-describedby') ||
            element.getAttribute('title')) {
            return true;
        }

        return false;
    }

    /**
     * –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –¥–ª—è UI
     */
    async getDetailedAnalysis(pageData) {
        const analysis = {
            images: await this.analyzeImages(pageData),
            contrast: await this.analyzeContrast(pageData),
            media: await this.analyzeMedia(pageData),
            colorUsage: await this.analyzeColorUsage(pageData)
        };

        return analysis;
    }

    async analyzeImages(pageData) {
        const images = pageData.images.filter(img => this.helpers.isElementVisible(img));
        const results = {
            total: images.length,
            withAlt: 0,
            decorative: 0,
            problematic: [],
            good: []
        };

        images.forEach(img => {
            const check = this.checkImageAlternative(img);
            const selector = this.helpers.generateSelector(img);
            
            if (check.passed) {
                results.good.push({
                    selector,
                    message: check.message,
                    data: check.data
                });
                
                if (img.getAttribute('alt') === '') {
                    results.decorative++;
                } else {
                    results.withAlt++;
                }
            } else {
                results.problematic.push({
                    selector,
                    message: check.message,
                    severity: check.severity,
                    data: check.data
                });
            }
        });

        return results;
    }

    async analyzeContrast(pageData) {
        const textElements = this.getTextElements().slice(0, 30); // –û–±–º–µ–∂—É—î–º–æ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        const results = {
            total: textElements.length,
            aaa: 0,
            aa: 0,
            failed: 0,
            problematic: []
        };

        textElements.forEach(element => {
            const check = this.checkTextContrast(element);
            const selector = this.helpers.generateSelector(element);
            
            if (check.passed) {
                if (check.data?.level === 'AAA') {
                    results.aaa++;
                } else {
                    results.aa++;
                }
            } else {
                results.failed++;
                results.problematic.push({
                    selector,
                    message: check.message,
                    severity: check.severity,
                    data: check.data
                });
            }
        });

        return results;
    }

    async analyzeMedia(pageData) {
        const videos = pageData.videos || [];
        const audios = pageData.audio || [];
        
        return {
            videos: {
                total: videos.length,
                withCaptions: videos.filter(v => v.querySelectorAll('track').length > 0).length,
                withControls: videos.filter(v => v.hasAttribute('controls')).length
            },
            audio: {
                total: audios.length,
                withControls: audios.filter(a => a.hasAttribute('controls')).length
            }
        };
    }

    async analyzeColorUsage(pageData) {
        const colorOnlyElements = this.findColorOnlyInformation();
        const problematic = colorOnlyElements.filter(el => !this.hasNonColorIndicators(el));
        
        return {
            total: colorOnlyElements.length,
            problematic: problematic.length,
            issues: problematic.map(el => ({
                selector: this.helpers.generateSelector(el),
                message: '–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –º–æ–∂–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏—Å—è —Ç—ñ–ª—å–∫–∏ —á–µ—Ä–µ–∑ –∫–æ–ª—ñ—Ä'
            }))
        };
    }
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
window.PerceptibilityMetrics = PerceptibilityMetrics;